openapi: 3.0.3
info:
  title: ZaneOps API
  version: 1.0.0
  description: Your deployment, simplified. Everything handled for you.
paths:
  /api/auth/login/:
    post:
      operationId: login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginErrorResponse'
          description: ''
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginErrorResponse'
          description: ''
  /api/auth/logout/:
    delete:
      operationId: logout
      tags:
      - auth
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
  /api/auth/me/:
    get:
      operationId: getAuthedUser
      tags:
      - auth
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthedSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
  /api/csrf/:
    get:
      operationId: csrf_retrieve
      description: CSRF cookie view for retrieving CSRF before doing requests
      tags:
      - csrf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRF'
          description: ''
  /api/docker/check-port/:
    post:
      operationId: checkIfPortIsAvailable
      tags:
      - docker
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerPortCheckRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DockerPortCheckRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DockerPortCheckRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerPortCheckSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerPortCheckSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerPortCheckErrorResponse'
          description: ''
  /api/docker/image-search/:
    get:
      operationId: searchDockerRegistry
      parameters:
      - in: query
        name: q
        schema:
          type: string
          minLength: 1
        required: true
      tags:
      - docker
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerImageSearchErrorResponse'
          description: ''
  /api/docker/login/:
    post:
      operationId: dockerLogin
      tags:
      - docker
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerLoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DockerLoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DockerLoginRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerLoginSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerLoginErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerLoginErrorResponse'
          description: ''
  /api/domain/root/:
    get:
      operationId: getRootDomain
      tags:
      - domain
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRootDomain'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
  /api/projects/:
    get:
      operationId: getProjectList
      parameters:
      - in: query
        name: include_archived
        schema:
          type: boolean
          default: false
      - in: query
        name: query
        schema:
          type: string
          default: ''
      - in: query
        name: sort
        schema:
          enum:
          - name_asc
          - updated_at_desc
          type: string
          default: updated_at_desc
          minLength: 1
        description: |-
          * `name_asc` - name ascending
          * `updated_at_desc` - updated_at in descending order
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjetCreateErrorResponse'
          description: ''
    post:
      operationId: createProject
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjetCreateErrorResponse'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjetCreateErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjetCreateErrorResponse'
          description: ''
  /api/projects/{project_slug}/create-service/docker/:
    post:
      operationId: createDockerService
      parameters:
      - in: path
        name: project_slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerServiceCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DockerServiceCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DockerServiceCreateRequest'
        required: true
      security:
      - cookieAuth: []
      responses:
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerServiceCreateErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerServiceCreateErrorResponse'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerServiceCreateErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerServiceCreateSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
  /api/projects/{project_slug}/service-details/docker/{service_slug}/:
    get:
      operationId: getDockerService
      parameters:
      - in: path
        name: project_slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      - in: path
        name: service_slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerServiceCreateSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
  /api/projects/{slug}/:
    get:
      operationId: getSingleProject
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdateErrorResponse'
          description: ''
    patch:
      operationId: updateProjectName
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdateRequest'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdateErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdateErrorResponse'
          description: ''
    delete:
      operationId: archiveSingleProject
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: ''
  /api/volumes/{slug}/size/:
    get:
      operationId: getVolumeSize
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - volumes
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeGetSizeSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseErrorResponse'
          description: ''
components:
  schemas:
    AuthedSuccessResponse:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - user
    BaseError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
    BaseErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/BaseError'
      required:
      - errors
    CSRF:
      type: object
      properties:
        details:
          type: string
      required:
      - details
    DockerCredentialsRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 100
        password:
          type: string
          maxLength: 100
        registry_url:
          type: string
          format: uri
      required:
      - password
      - username
    DockerImage:
      type: object
      properties:
        full_image:
          type: string
          maxLength: 255
        description:
          type: string
      required:
      - description
      - full_image
    DockerImageSearchError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        q:
          type: array
          items:
            type: string
    DockerImageSearchErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/DockerImageSearchError'
      required:
      - errors
    DockerLoginError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        username:
          type: array
          items:
            type: string
        password:
          type: array
          items:
            type: string
        registry_url:
          type: array
          items:
            type: string
    DockerLoginErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/DockerLoginError'
      required:
      - errors
    DockerLoginRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
        password:
          type: string
          maxLength: 255
        registry_url:
          type: string
          format: uri
      required:
      - password
      - username
    DockerLoginSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
      - success
    DockerPortCheckError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        port:
          type: array
          items:
            type: string
    DockerPortCheckErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/DockerPortCheckError'
      required:
      - errors
    DockerPortCheckRequest:
      type: object
      properties:
        port:
          type: integer
          minimum: 0
      required:
      - port
    DockerPortCheckSuccessResponse:
      type: object
      properties:
        available:
          type: boolean
      required:
      - available
    DockerService:
      type: object
      properties:
        image:
          type: string
          maxLength: 510
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        urls:
          type: array
          items:
            $ref: '#/components/schemas/URLModel'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
          readOnly: true
        name:
          type: string
          maxLength: 255
        archived:
          type: boolean
        command:
          type: string
          nullable: true
        env_variables:
          type: array
          items:
            $ref: '#/components/schemas/EnvVariable'
          readOnly: true
        ports:
          type: array
          items:
            $ref: '#/components/schemas/PortConfiguration'
          readOnly: true
      required:
      - created_at
      - env_variables
      - image
      - name
      - ports
      - slug
      - updated_at
      - urls
      - volumes
    DockerServiceCreateError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        name:
          type: array
          items:
            type: string
        image:
          type: array
          items:
            type: string
        credentials:
          type: array
          items:
            type: string
        urls:
          type: array
          items:
            type: string
        command:
          type: array
          items:
            type: string
        ports:
          type: array
          items:
            type: string
        env:
          type: array
          items:
            type: string
        volumes:
          type: array
          items:
            type: string
    DockerServiceCreateErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/DockerServiceCreateError'
      required:
      - errors
    DockerServiceCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        image:
          type: string
        credentials:
          $ref: '#/components/schemas/DockerCredentialsRequest'
        urls:
          type: array
          items:
            $ref: '#/components/schemas/URL'
        command:
          type: string
        ports:
          type: array
          items:
            $ref: '#/components/schemas/ServicePortsRequest'
        env:
          type: object
          additionalProperties:
            type: string
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/VolumeRequest'
      required:
      - image
      - name
    DockerServiceCreateSuccessResponse:
      type: object
      properties:
        service:
          allOf:
          - $ref: '#/components/schemas/DockerService'
          readOnly: true
      required:
      - service
    DockerSuccessResponse:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/DockerImage'
      required:
      - images
    EnvVariable:
      type: object
      properties:
        key:
          type: string
          maxLength: 255
        value:
          type: string
          maxLength: 255
        is_for_production:
          type: boolean
      required:
      - key
      - value
    ForbiddenResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    GetRootDomain:
      type: object
      properties:
        domain:
          type: string
      required:
      - domain
    LoginError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        username:
          type: array
          items:
            type: string
        password:
          type: array
          items:
            type: string
    LoginErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/LoginError'
      required:
      - errors
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
          minLength: 1
        password:
          type: string
          maxLength: 255
          minLength: 1
      required:
      - password
      - username
    LoginSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
      - success
    PatchedProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
    PortConfiguration:
      type: object
      properties:
        host:
          type: integer
          maximum: 2147483647
          minimum: 0
        forwarded:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - forwarded
    Project:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        archived:
          type: boolean
        owner:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - name
      - owner
      - updated_at
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
      required:
      - name
    ProjectSuccessResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
      required:
      - projects
    ProjectUpdateErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ProjetUpdateError'
      required:
      - errors
    ProjetCreateError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        name:
          type: array
          items:
            type: string
    ProjetCreateErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ProjetCreateError'
      required:
      - errors
    ProjetUpdateError:
      type: object
      properties:
        root:
          type: array
          items:
            type: string
        name:
          type: array
          items:
            type: string
    ServicePortsRequest:
      type: object
      properties:
        public:
          type: integer
          default: 80
        forwarded:
          type: integer
      required:
      - forwarded
    SingleProjectSuccessResponse:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/Project'
      required:
      - project
    URL:
      type: object
      properties:
        domain:
          type: string
        base_path:
          type: string
          default: /
      required:
      - domain
    URLModel:
      type: object
      properties:
        domain:
          type: string
          nullable: true
          maxLength: 1000
        base_path:
          type: string
          default: /
      required:
      - domain
    UnitEnum:
      enum:
      - B
      - MB
      - KB
      - GB
      type: string
      description: |-
        * `B` - B
        * `MB` - MB
        * `KB` - KB
        * `GB` - GB
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - username
    Volume:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          maxLength: 255
        containerPath:
          type: string
          maxLength: 255
        size_limit:
          type: integer
          maximum: 2147483647
          minimum: 1024
          nullable: true
      required:
      - containerPath
      - created_at
      - name
      - slug
      - updated_at
    VolumeGetSizeSuccessResponse:
      type: object
      properties:
        size:
          type: integer
      required:
      - size
    VolumeRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        size:
          $ref: '#/components/schemas/VolumeSizeRequest'
        mount_path:
          type: string
          maxLength: 255
      required:
      - mount_path
      - name
    VolumeSizeRequest:
      type: object
      properties:
        n:
          type: integer
        unit:
          allOf:
          - $ref: '#/components/schemas/UnitEnum'
          default: B
      required:
      - n
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
