openapi: 3.0.3
info:
  title: ZaneOps API
  version: 1.0.0
  description: Your deployment, simplified. Everything handled for you.
paths:
  /api/auth/login/:
    post:
      operationId: login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/logout/:
    delete:
      operationId: logout
      tags:
      - auth
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthedForbiddenResponse'
          description: ''
  /api/auth/me/:
    get:
      operationId: getAuthedUser
      tags:
      - auth
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthedSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthedForbiddenResponse'
          description: ''
  /api/csrf/:
    get:
      operationId: csrf_retrieve
      description: CSRF cookie view for retrieving CSRF before doing requests
      tags:
      - csrf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRF'
          description: ''
  /api/docker/image-search/:
    get:
      operationId: searchDockerRegistry
      parameters:
      - in: query
        name: q
        schema:
          type: string
          default: ''
          minLength: 1
      tags:
      - docker
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/projects/:
    get:
      operationId: getProjectList
      parameters:
      - in: query
        name: include_archived
        schema:
          type: boolean
          default: false
      - in: query
        name: query
        schema:
          type: string
          default: ''
      - in: query
        name: sort
        schema:
          enum:
          - name_asc
          - updated_at_desc
          type: string
          default: updated_at_desc
          minLength: 1
        description: |-
          * `name_asc` - name ascending
          * `updated_at_desc` - updated_at in descending order
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createProject
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreateForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreateForm'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/projects/{slug}/:
    get:
      operationId: getSingleProject
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: updateProjectName
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdateForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdateForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdateForm'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProjectSuccessResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: archiveSingleProject
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
        required: true
      tags:
      - projects
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
components:
  schemas:
    AuthedForbiddenResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    AuthedSuccessResponse:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - user
    CSRF:
      type: object
      properties:
        details:
          type: string
      required:
      - details
    DockerImage:
      type: object
      properties:
        full_image:
          type: string
          maxLength: 255
        description:
          type: string
      required:
      - description
      - full_image
    DockerSuccessResponse:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/DockerImage'
      required:
      - images
    ErrorResponse:
      type: object
      properties:
        errors:
          type: object
          additionalProperties: {}
      required:
      - errors
    ForbiddenResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
          minLength: 1
        password:
          type: string
          maxLength: 255
          minLength: 1
      required:
      - password
      - username
    LoginSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
      - success
    PatchedProjectUpdateForm:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
    Project:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        archived:
          type: boolean
        owner:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - name
      - owner
      - updated_at
    ProjectCreateForm:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
      required:
      - name
    ProjectSuccessResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
      required:
      - projects
    SingleProjectSuccessResponse:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/Project'
      required:
      - project
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
