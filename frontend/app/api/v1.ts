/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/archived-projects/": {
    /** List archived projects */
    get: operations["getArchivedProjectList"];
  };
  "/api/auth/check-user-existence/": {
    /**
     * Check if a user exists
     * @description Returns whether a single user already exists in the system.
     */
    get: operations["auth_check_user_existence_retrieve"];
  };
  "/api/auth/create-initial-user/": {
    /**
     * Create a user
     * @description Creates a new user if no user exists.
     */
    post: operations["auth_create_initial_user_create"];
  };
  "/api/auth/login/": {
    /**
     * Login
     * @description Authenticate User, what is returned is a cookie named `sessionid` that will be used for authentication of the next requests.
     */
    post: operations["login"];
  };
  "/api/auth/logout/": {
    /** Logout */
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    /**
     * Get current user
     * @description Get current authenticated user.
     */
    get: operations["getAuthedUser"];
  };
  "/api/csrf/": {
    /**
     * Get CSRF cookie
     * @description CSRF cookie endpoint for retrieving a CSRF token before doing mutative requests (`DELETE`, `POST`, `PUT`, `PATCH`).You need to pass the cookie named `csrftoken` to all requests alongside a `X-CSRFToken` with the value of the token.
     */
    get: operations["getCSRF"];
  };
  "/api/deploy-service/docker/{deploy_token}": {
    /**
     * Webhook to deploy a docker service
     * @description trigger a new deployment.
     */
    put: operations["webhookDeployService"];
  };
  "/api/docker/check-port/": {
    /**
     * Check Port
     * @description Check If Port is available on host machine
     */
    post: operations["checkIfPortIsAvailable"];
  };
  "/api/docker/image-search/": {
    /**
     * Search docker hub
     * @description Search a docker Image in docker hub Registry
     */
    get: operations["searchDockerRegistry"];
  };
  "/api/ping/": {
    /**
     * Ping
     * @description simple healthcheck endpoint.
     */
    get: operations["ping"];
  };
  "/api/projects/": {
    /** List all active projects */
    get: operations["getProjectList"];
    /** Create a new project */
    post: operations["createProject"];
  };
  "/api/projects/{project_slug}/{env_slug}/archive-service/docker/{service_slug}/": {
    /**
     * Archive a docker service
     * @description Archive a service created from a docker image.
     */
    delete: operations["archiveDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/bulk-toggle-services/": {
    /**
     * Stop/Restart multiple services
     * @description Stops a running docker service and restart it if it was stopped.
     */
    put: operations["bulkToggleServices"];
  };
  "/api/projects/{project_slug}/{env_slug}/cancel-deployment/docker/{service_slug}/{deployment_hash}/": {
    /**
     * Cancel deployment
     * @description Cancel a deployment in progress.
     */
    put: operations["cancelDockerServiceDeployment"];
  };
  "/api/projects/{project_slug}/{env_slug}/cancel-service-changes/docker/{service_slug}/{change_id}/": {
    /**
     * Cancel a config change
     * @description Cancel a config change that was requested.
     */
    delete: operations["cancelDeploymentChanges"];
  };
  "/api/projects/{project_slug}/{env_slug}/create-service/docker/": {
    /**
     * Create a docker service
     * @description Create a service from a docker image.
     */
    post: operations["createDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/create-service/git/": {
    /**
     * Create a docker service
     * @description Create a service from a docker image.
     */
    post: operations["createGitService"];
  };
  "/api/projects/{project_slug}/{env_slug}/deploy-service/docker/{service_slug}/": {
    /**
     * Deploy a docker service
     * @description Apply all pending changes for the service and trigger a new deployment.
     */
    put: operations["deployDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/deploy-service/docker/{service_slug}/{deployment_hash}/": {
    /**
     * Redeploy a docker service
     * @description Revert the service to the state of a previous deployment.
     */
    put: operations["redeployDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/deploy-service/git/{service_slug}/": {
    /**
     * Deploy a git service
     * @description Apply all pending changes for the service and trigger a new deployment.
     */
    put: operations["deployGitService"];
  };
  "/api/projects/{project_slug}/{env_slug}/request-env-changes/docker/{service_slug}/": {
    /**
     * Request env changes
     * @description Request a change to the environments variables of a service.
     */
    put: operations["requestEnvChanges"];
  };
  "/api/projects/{project_slug}/{env_slug}/request-service-changes/docker/{service_slug}/": {
    /**
     * Request config changes
     * @description Request a change to the configuration of a service.
     */
    put: operations["requestDeploymentChanges"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/": {
    /**
     * Get single service
     * @description See all the details of a service.
     */
    get: operations["getDockerService"];
    /** Update a service */
    patch: operations["updateService"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/": {
    /**
     * List all deployments
     * @description List all deployments for a service, the default order is last created descendant.
     */
    get: operations["projects_service_details_docker_deployments_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/": {
    /** Get single deployment */
    get: operations["projects_service_details_docker_deployments_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/http-logs/": {
    /** Get deployment HTTP logs */
    get: operations["projects_service_details_docker_deployments_http_logs_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/http-logs/{request_uuid}/": {
    /** Get single deployment http log */
    get: operations["projects_service_details_docker_deployments_http_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/http-logs/fields/": {
    /** Get deployment http logs fields values */
    get: operations["projects_service_details_docker_deployments_http_logs_fields_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/logs/": {
    /** Get deployment logs */
    get: operations["projects_service_details_docker_deployments_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/metrics/": {
    /** Get service or deployment metrics */
    get: operations["projects_service_details_docker_deployments_metrics_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/http-logs/": {
    /** Get service HTTP logs */
    get: operations["projects_service_details_docker_http_logs_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/http-logs/{request_uuid}/": {
    /** Get single service http log */
    get: operations["projects_service_details_docker_http_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/http-logs/fields/": {
    /** Get service http logs fields values */
    get: operations["projects_service_details_docker_http_logs_fields_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/metrics/": {
    /** Get service or deployment metrics */
    get: operations["projects_service_details_docker_metrics_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/docker/{service_slug}/regenerate-deploy-token/": {
    /** Regenerate service deploy token */
    patch: operations["regenerateServiceDeployToken"];
  };
  "/api/projects/{project_slug}/{env_slug}/toggle-service/{service_slug}/": {
    /**
     * Stop/Restart a docker service
     * @description Stops a running docker service and restart it if it was stopped.
     */
    put: operations["toggleService"];
  };
  "/api/projects/{project_slug}/{env_slug}/variables/": {
    get: operations["projects_variables_list"];
    post: operations["projects_variables_create"];
  };
  "/api/projects/{project_slug}/{env_slug}/variables/{id}/": {
    get: operations["projects_variables_retrieve"];
    put: operations["projects_variables_update"];
    delete: operations["projects_variables_destroy"];
    patch: operations["projects_variables_partial_update"];
  };
  "/api/projects/{slug}/": {
    /** Get single project */
    get: operations["getSingleProject"];
    /** Archive a Project */
    delete: operations["archiveSingleProject"];
    /** Update a project */
    patch: operations["updateProject"];
  };
  "/api/projects/{slug}/{env_slug}/service-list/": {
    /**
     * Get service list
     * @description Get all services in a project
     */
    get: operations["projects_service_list_list"];
  };
  "/api/projects/{slug}/clone-environment/{env_slug}/": {
    /**
     * Clone environment
     * @description Create new environment from another
     */
    post: operations["cloneEnvironment"];
  };
  "/api/projects/{slug}/create-environment/": {
    /**
     * Create new environment
     * @description Create empty environment with no services in it
     */
    post: operations["createNewEnvironment"];
  };
  "/api/projects/{slug}/environment-details/{env_slug}/": {
    /** Get a single environment */
    get: operations["getEnvironment"];
    /**
     * Archive environment
     * @description Archive environment with the services inside of it
     */
    delete: operations["archiveEnvironment"];
    /** Update an environment */
    patch: operations["updateEnvironment"];
  };
  "/api/search-resources/": {
    /** search for resources (project, service ...) */
    get: operations["searchResources"];
  };
  "/api/server/resource-limits/": {
    /**
     * Get server resource limits
     * @description Get the number of CPUS & memory of the server.
     */
    get: operations["getServerResouceLimits"];
  };
  "/api/settings/": {
    /**
     * Get API settings
     * @description Get the settings of the API.
     */
    get: operations["getAPISettings"];
  };
  "/api/trigger-update/": {
    /**
     * Trigger Auto-Update
     * @description Triggers the Docker auto-update workflow using Temporal.
     */
    post: operations["trigger_update_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ArchiveDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveEnvironmentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchivedProject: {
      id: number;
      slug: string;
      /** Format: date-time */
      archived_at: string;
      description: string | null;
    };
    AuthCheckUserExistenceRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    AuthCreateInitialUserCreateError: components["schemas"]["AuthCreateInitialUserCreateNonFieldErrorsErrorComponent"] | components["schemas"]["AuthCreateInitialUserCreateUsernameErrorComponent"] | components["schemas"]["AuthCreateInitialUserCreatePasswordErrorComponent"];
    AuthCreateInitialUserCreateErrorResponse400: components["schemas"]["AuthCreateInitialUserCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    AuthCreateInitialUserCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    AuthCreateInitialUserCreatePasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    AuthCreateInitialUserCreateUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    AuthCreateInitialUserCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["AuthCreateInitialUserCreateError"][];
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    AutoUpdateRequestRequest: {
      desired_version: string;
    };
    AutoUpdateResponse: {
      message: string;
    };
    BulkToggleServiceStateRequestRequest: {
      desired_state: components["schemas"]["DesiredStateEnum"];
      service_ids: string[];
    };
    BulkToggleServicesDesiredStateErrorComponent: {
      /**
       * @description * `desired_state` - desired_state
       * @enum {string}
       */
      attr: "desired_state";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    BulkToggleServicesError: components["schemas"]["BulkToggleServicesNonFieldErrorsErrorComponent"] | components["schemas"]["BulkToggleServicesDesiredStateErrorComponent"] | components["schemas"]["BulkToggleServicesServiceIdsErrorComponent"] | components["schemas"]["BulkToggleServicesServiceIdsINDEXErrorComponent"];
    BulkToggleServicesErrorResponse400: components["schemas"]["BulkToggleServicesValidationError"] | components["schemas"]["ParseErrorResponse"];
    BulkToggleServicesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    BulkToggleServicesServiceIdsErrorComponent: {
      /**
       * @description * `service_ids` - service_ids
       * @enum {string}
       */
      attr: "service_ids";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "not_a_list" | "null" | "required";
      detail: string;
    };
    BulkToggleServicesServiceIdsINDEXErrorComponent: {
      /**
       * @description * `service_ids.INDEX` - service_ids.INDEX
       * @enum {string}
       */
      attr: "service_ids.INDEX";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    BulkToggleServicesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["BulkToggleServicesError"][];
    };
    CancelDeploymentChangesErrorResponse400: components["schemas"]["ParseErrorResponse"];
    CancelDockerServiceDeploymentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    CheckIfPortIsAvailableError: components["schemas"]["CheckIfPortIsAvailableNonFieldErrorsErrorComponent"] | components["schemas"]["CheckIfPortIsAvailablePortErrorComponent"];
    CheckIfPortIsAvailableErrorResponse400: components["schemas"]["CheckIfPortIsAvailableValidationError"] | components["schemas"]["ParseErrorResponse"];
    CheckIfPortIsAvailableNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CheckIfPortIsAvailablePortErrorComponent: {
      /**
       * @description * `port` - port
       * @enum {string}
       */
      attr: "port";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    CheckIfPortIsAvailableValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CheckIfPortIsAvailableError"][];
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: "client_error";
    CloneEnvironmentDeployServicesErrorComponent: {
      /**
       * @description * `deploy_services` - deploy_services
       * @enum {string}
       */
      attr: "deploy_services";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CloneEnvironmentError: components["schemas"]["CloneEnvironmentNonFieldErrorsErrorComponent"] | components["schemas"]["CloneEnvironmentDeployServicesErrorComponent"] | components["schemas"]["CloneEnvironmentNameErrorComponent"];
    CloneEnvironmentErrorResponse400: components["schemas"]["CloneEnvironmentValidationError"] | components["schemas"]["ParseErrorResponse"];
    CloneEnvironmentNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CloneEnvironmentNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CloneEnvironmentRequestRequest: {
      /** @default false */
      deploy_services?: boolean;
      name: string;
    };
    CloneEnvironmentValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CloneEnvironmentError"][];
    };
    Config: {
      id: string;
      name: string;
      mount_path: string;
      contents: string;
      language: string;
      version: number;
    };
    /**
     * @description * `configs` - configs
     * @enum {string}
     */
    ConfigItemChangeFieldEnum: "configs";
    ConfigItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["ConfigRequestRequest"];
      field: components["schemas"]["ConfigItemChangeFieldEnum"];
    };
    ConfigRequest: {
      id?: string;
      name: string;
      mount_path: string;
      contents?: string;
      language?: string;
      version?: number;
    };
    ConfigRequestRequest: {
      contents: string;
      name?: string;
      mount_path: string;
      /** @default plaintext */
      language?: string;
    };
    CreateDockerServiceCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceError: components["schemas"]["CreateDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceSlugErrorComponent"] | components["schemas"]["CreateDockerServiceImageErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsUsernameErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsPasswordErrorComponent"];
    CreateDockerServiceErrorResponse400: components["schemas"]["CreateDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateDockerServiceImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateDockerServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateDockerServiceError"][];
    };
    CreateEnvironmentRequestRequest: {
      name: string;
    };
    CreateGitServiceBranchNameErrorComponent: {
      /**
       * @description * `branch_name` - branch_name
       * @enum {string}
       */
      attr: "branch_name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceBuildContextDirErrorComponent: {
      /**
       * @description * `build_context_dir` - build_context_dir
       * @enum {string}
       */
      attr: "build_context_dir";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceBuilderErrorComponent: {
      /**
       * @description * `builder` - builder
       * @enum {string}
       */
      attr: "builder";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    CreateGitServiceDockerfilePathErrorComponent: {
      /**
       * @description * `dockerfile_path` - dockerfile_path
       * @enum {string}
       */
      attr: "dockerfile_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceError: components["schemas"]["CreateGitServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateGitServiceSlugErrorComponent"] | components["schemas"]["CreateGitServiceRepositoryUrlErrorComponent"] | components["schemas"]["CreateGitServiceBranchNameErrorComponent"] | components["schemas"]["CreateGitServiceDockerfilePathErrorComponent"] | components["schemas"]["CreateGitServiceBuildContextDirErrorComponent"] | components["schemas"]["CreateGitServiceBuilderErrorComponent"];
    CreateGitServiceErrorResponse400: components["schemas"]["CreateGitServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateGitServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateGitServiceRepositoryUrlErrorComponent: {
      /**
       * @description * `repository_url` - repository_url
       * @enum {string}
       */
      attr: "repository_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceRequestRequest: components["schemas"]["GitServiceDockerfileBuilderRequestRequest"];
    CreateGitServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateGitServiceError"][];
    };
    CreateNewEnvironmentError: components["schemas"]["CreateNewEnvironmentNonFieldErrorsErrorComponent"] | components["schemas"]["CreateNewEnvironmentNameErrorComponent"];
    CreateNewEnvironmentErrorResponse400: components["schemas"]["CreateNewEnvironmentValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateNewEnvironmentNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateNewEnvironmentNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateNewEnvironmentValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateNewEnvironmentError"][];
    };
    CreateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectError: components["schemas"]["CreateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["CreateProjectSlugErrorComponent"] | components["schemas"]["CreateProjectDescriptionErrorComponent"];
    CreateProjectErrorResponse400: components["schemas"]["CreateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateProjectError"][];
    };
    DeployDockerServiceCommitMessageErrorComponent: {
      /**
       * @description * `commit_message` - commit_message
       * @enum {string}
       */
      attr: "commit_message";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DeployDockerServiceError: components["schemas"]["DeployDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["DeployDockerServiceCommitMessageErrorComponent"];
    DeployDockerServiceErrorResponse400: components["schemas"]["DeployDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    DeployDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    DeployDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["DeployDockerServiceError"][];
    };
    DeployGitServiceError: components["schemas"]["DeployGitServiceNonFieldErrorsErrorComponent"] | components["schemas"]["DeployGitServiceIgnoreBuildCacheErrorComponent"];
    DeployGitServiceErrorResponse400: components["schemas"]["DeployGitServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    DeployGitServiceIgnoreBuildCacheErrorComponent: {
      /**
       * @description * `ignore_build_cache` - ignore_build_cache
       * @enum {string}
       */
      attr: "ignore_build_cache";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    DeployGitServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    DeployGitServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["DeployGitServiceError"][];
    };
    DeploymentChange: {
      id: string;
      type: components["schemas"]["DeploymentChangeTypeEnum"];
      field: components["schemas"]["DeploymentChangeFieldEnum"];
      new_value: unknown;
      old_value: unknown;
      item_id: string | null;
    };
    /**
     * @description * `source` - source
     * * `command` - command
     * * `healthcheck` - healthcheck
     * * `volumes` - volumes
     * * `env_variables` - env variables
     * * `urls` - urls
     * * `ports` - ports
     * * `resource_limits` - resource limits
     * * `configs` - configs
     * @enum {string}
     */
    DeploymentChangeFieldEnum: "source" | "command" | "healthcheck" | "volumes" | "env_variables" | "urls" | "ports" | "resource_limits" | "configs";
    DeploymentChangeRequest: {
      id?: string;
      type: components["schemas"]["DeploymentChangeTypeEnum"];
      field: components["schemas"]["DeploymentChangeFieldEnum"];
      new_value?: unknown;
      old_value?: unknown;
      item_id?: string | null;
    };
    DeploymentChangeRequestRequest: components["schemas"]["URLItemChangeRequest"] | components["schemas"]["VolumeItemChangeRequest"] | components["schemas"]["EnvItemChangeRequest"] | components["schemas"]["PortItemChangeRequest"] | components["schemas"]["DockerSourceFieldChangeRequest"] | components["schemas"]["DockerCommandFieldChangeRequest"] | components["schemas"]["HealthcheckFieldChangeRequest"] | components["schemas"]["ResourceLimitChangeRequest"] | components["schemas"]["ConfigItemChangeRequest"];
    /**
     * @description * `UPDATE` - update
     * * `DELETE` - delete
     * * `ADD` - add
     * @enum {string}
     */
    DeploymentChangeTypeEnum: "UPDATE" | "DELETE" | "ADD";
    DeploymentDocker: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id: string;
      slug: string;
      type: components["schemas"]["ServiceTypeEnum"];
      image: string;
      command: string | null;
      builder: components["schemas"]["GitServiceBuilderEnum"] | components["schemas"]["NullEnum"] | null;
      /** Format: uri */
      repository_url: string | null;
      branch_name: string | null;
      commit_sha: string | null;
      dockerfile_builder_options: components["schemas"]["DockerfileBuilderOptions"] | null;
      healthcheck: components["schemas"]["HealthCheck"] | null;
      project_id: string;
      environment: components["schemas"]["Environment"];
      credentials: components["schemas"]["DockerCredential"] | null;
      urls: readonly components["schemas"]["URLModel"][];
      volumes: readonly components["schemas"]["Volume"][];
      deploy_token: string | null;
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: readonly components["schemas"]["EnvVariable"][];
      network_aliases: readonly string[];
      network_alias: string | null;
      unapplied_changes: readonly components["schemas"]["DeploymentChange"][];
      resource_limits: components["schemas"]["ResourceLimits"] | null;
      /** @default [] */
      system_env_variables: components["schemas"]["SystemEnvVariables"][];
      configs: readonly components["schemas"]["Config"][];
    };
    /**
     * @description * `start` - start
     * * `stop` - stop
     * @enum {string}
     */
    DesiredStateEnum: "start" | "stop";
    /**
     * @description * `command` - command
     * @enum {string}
     */
    DockerCommandFieldChangeFieldEnum: "command";
    DockerCommandFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: string | null;
      field: components["schemas"]["DockerCommandFieldChangeFieldEnum"];
    };
    DockerCredential: {
      username: string;
      password: string;
    };
    DockerCredentialRequest: {
      username: string;
      password: string;
    };
    DockerCredentialsRequestRequest: {
      username?: string;
      password?: string;
    };
    DockerImage: {
      full_image: string;
      description: string;
    };
    DockerImageSearchResponse: {
      images: components["schemas"]["DockerImage"][];
    };
    DockerPortCheckRequestRequest: {
      port: number;
    };
    DockerPortCheckResponse: {
      available: boolean;
    };
    DockerServiceCard: {
      /** Format: date-time */
      updated_at: string;
      volume_number: number;
      slug: string;
      /** Format: uri */
      url: string | null;
      status: components["schemas"]["ServiceStatusEnum"];
      id: string;
      /** @default docker */
      type: components["schemas"]["DockerServiceCardTypeEnum"];
      image: string;
      tag: string;
    };
    /**
     * @description * `docker` - docker
     * @enum {string}
     */
    DockerServiceCardTypeEnum: "docker";
    DockerServiceCreateRequestRequest: {
      slug?: string;
      image: string;
      credentials?: components["schemas"]["DockerCredentialsRequestRequest"];
    };
    DockerServiceDeployRequestRequest: {
      commit_message?: string;
    };
    DockerServiceWebhookDeployRequestRequest: {
      commit_message?: string;
      new_image?: string;
    };
    /**
     * @description * `source` - source
     * @enum {string}
     */
    DockerSourceFieldChangeFieldEnum: "source";
    DockerSourceFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["DockerSourceRequestRequest"];
      field: components["schemas"]["DockerSourceFieldChangeFieldEnum"];
    };
    DockerSourceRequestRequest: {
      image: string;
      credentials?: components["schemas"]["DockerCredentialsRequestRequest"];
    };
    DockerfileBuilderOptions: {
      dockerfile_path: string;
      build_context_dir: string;
    };
    DockerfileBuilderOptionsRequest: {
      dockerfile_path: string;
      build_context_dir: string;
    };
    /**
     * @description * `env_variables` - env_variables
     * @enum {string}
     */
    EnvItemChangeFieldEnum: "env_variables";
    EnvItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["EnvRequestRequest"];
      field: components["schemas"]["EnvItemChangeFieldEnum"];
    };
    EnvRequestRequest: {
      key: string;
      value: string;
    };
    EnvStringChangeRequest: {
      new_value: string;
    };
    EnvVariable: {
      id: string;
      key: string;
      value: string;
    };
    EnvVariableRequest: {
      id?: string;
      key: string;
      value?: string;
    };
    Environment: {
      id: string;
      is_preview: boolean;
      name: string;
      variables: readonly components["schemas"]["SharedEnvVariable"][];
    };
    EnvironmentRequest: {
      id?: string;
      is_preview?: boolean;
      name: string;
    };
    EnvironmentWithServices: {
      id: string;
      is_preview: boolean;
      name: string;
      services: readonly components["schemas"]["Service"][];
    };
    Error401: {
      code: components["schemas"]["ErrorCode401Enum"];
      detail: string;
      attr: string | null;
    };
    Error404: {
      code: components["schemas"]["ErrorCode404Enum"];
      detail: string;
      attr: string | null;
    };
    Error409: {
      code: components["schemas"]["Error409CodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `resource_conflict` - Resource Conflict
     * @enum {string}
     */
    Error409CodeEnum: "resource_conflict";
    Error429: {
      code: components["schemas"]["ErrorCode429Enum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `authentication_failed` - Authentication Failed
     * * `not_authenticated` - Not Authenticated
     * @enum {string}
     */
    ErrorCode401Enum: "authentication_failed" | "not_authenticated";
    /**
     * @description * `not_found` - Not Found
     * @enum {string}
     */
    ErrorCode404Enum: "not_found";
    /**
     * @description * `throttled` - Throttled
     * @enum {string}
     */
    ErrorCode429Enum: "throttled";
    ErrorResponse401: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error401"][];
    };
    ErrorResponse404: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error404"][];
    };
    ErrorResponse409: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error409"][];
    };
    ErrorResponse429: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error429"][];
    };
    /**
     * @description * `UPDATE` - Update
     * @enum {string}
     */
    FieldChangeTypeEnum: "UPDATE";
    GetAPISettingsErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetArchivedProjectListError: components["schemas"]["GetArchivedProjectListSlugErrorComponent"] | components["schemas"]["GetArchivedProjectListSortByErrorComponent"];
    GetArchivedProjectListErrorResponse400: components["schemas"]["GetArchivedProjectListValidationError"] | components["schemas"]["ParseErrorResponse"];
    GetArchivedProjectListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    GetArchivedProjectListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    GetArchivedProjectListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["GetArchivedProjectListError"][];
    };
    GetAuthedUserErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetCSRFErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetEnvironmentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetProjectListError: components["schemas"]["GetProjectListSlugErrorComponent"] | components["schemas"]["GetProjectListSortByErrorComponent"];
    GetProjectListErrorResponse400: components["schemas"]["GetProjectListValidationError"] | components["schemas"]["ParseErrorResponse"];
    GetProjectListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    GetProjectListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    GetProjectListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["GetProjectListError"][];
    };
    GetServerResouceLimitsErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    /**
     * @description * `DOCKERFILE` - Dockerfile
     * @enum {string}
     */
    GitServiceBuilderEnum: "DOCKERFILE";
    GitServiceCard: {
      /** Format: date-time */
      updated_at: string;
      volume_number: number;
      slug: string;
      /** Format: uri */
      url: string | null;
      status: components["schemas"]["ServiceStatusEnum"];
      id: string;
      /** @default git */
      type: components["schemas"]["GitServiceCardTypeEnum"];
      repository: string;
      last_commit_message: string;
      branch: string;
    };
    /**
     * @description * `git` - git
     * @enum {string}
     */
    GitServiceCardTypeEnum: "git";
    GitServiceDeployRequestRequest: {
      /** @default false */
      ignore_build_cache?: boolean;
    };
    /**
     * @description * `DOCKERFILE` - DOCKERFILE
     * @enum {string}
     */
    GitServiceDockerfileBuilderRequestBuilderEnum: "DOCKERFILE";
    GitServiceDockerfileBuilderRequestRequest: {
      slug?: string;
      /** Format: uri */
      repository_url: string;
      branch_name: string;
      /** @default ./Dockerfile */
      dockerfile_path?: string;
      /** @default ./ */
      build_context_dir?: string;
      /** @default DOCKERFILE */
      builder?: components["schemas"]["GitServiceDockerfileBuilderRequestBuilderEnum"];
    };
    HealthCheck: {
      id: string;
      type: components["schemas"]["HealthCheckTypeEnum"];
      value: string;
      timeout_seconds: number;
      interval_seconds: number;
      associated_port: number | null;
    };
    HealthCheckRequest: {
      id?: string;
      type?: components["schemas"]["HealthCheckTypeEnum"];
      value?: string;
      timeout_seconds?: number;
      interval_seconds?: number;
      associated_port?: number | null;
    };
    HealthCheckRequestRequest: {
      type: components["schemas"]["HealthCheckRequestTypeEnum"];
      value: string;
      /** @default 30 */
      timeout_seconds?: number;
      /** @default 30 */
      interval_seconds?: number;
      associated_port?: number;
    };
    /**
     * @description * `PATH` - path
     * * `COMMAND` - command
     * @enum {string}
     */
    HealthCheckRequestTypeEnum: "PATH" | "COMMAND";
    /**
     * @description * `COMMAND` - Command
     * * `PATH` - Path
     * @enum {string}
     */
    HealthCheckTypeEnum: "COMMAND" | "PATH";
    /**
     * @description * `healthcheck` - healthcheck
     * @enum {string}
     */
    HealthcheckFieldChangeFieldEnum: "healthcheck";
    HealthcheckFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["HealthCheckRequestRequest"] | null;
      field: components["schemas"]["HealthcheckFieldChangeFieldEnum"];
    };
    HttpLog: {
      /** Format: uuid */
      id: string;
      status: number;
      /** Format: date-time */
      time: string;
      deployment_id: string | null;
      service_id: string | null;
      request_id: string | null;
      request_ip: string;
      request_path: string;
      request_query: string | null;
      /** Format: uri */
      request_host: string;
      request_protocol: components["schemas"]["RequestProtocolEnum"];
      request_method: components["schemas"]["RequestMethodEnum"];
      /** Format: int64 */
      request_duration_ns: number;
      request_headers: {
        [key: string]: string[];
      };
      response_headers: {
        [key: string]: string[];
      };
      request_user_agent: string | null;
    };
    /**
     * @description * `ADD` - Add
     * * `DELETE` - Delete
     * * `UPDATE` - Update
     * @enum {string}
     */
    ItemChangeTypeEnum: "ADD" | "DELETE" | "UPDATE";
    /**
     * @description * `ERROR` - Error
     * * `INFO` - Info
     * @enum {string}
     */
    LevelEnum: "ERROR" | "INFO";
    LoginError: components["schemas"]["LoginNonFieldErrorsErrorComponent"] | components["schemas"]["LoginUsernameErrorComponent"] | components["schemas"]["LoginPasswordErrorComponent"];
    LoginErrorResponse400: components["schemas"]["LoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    LoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    LoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginRequestRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
    };
    LoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["LoginError"][];
    };
    LogoutErrorResponse400: components["schemas"]["ParseErrorResponse"];
    MemoryLimit: {
      value: number;
      unit: components["schemas"]["UnitEnum"];
    };
    MemoryLimitRequest: {
      value: number;
      unit: components["schemas"]["UnitEnum"];
    };
    MemoryLimitRequestRequest: {
      value: number;
      /** @default MEGABYTES */
      unit?: components["schemas"]["UnitEnum"];
    };
    /** @enum {unknown} */
    NullEnum: "";
    PING: {
      ping: components["schemas"]["PingEnum"];
    };
    PaginatedArchivedProjectList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["ArchivedProject"][];
    };
    PaginatedHttpLogList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous: string | null;
      results: components["schemas"]["HttpLog"][];
    };
    PaginatedProjectList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["Project"][];
    };
    PaginatedServiceDeploymentList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["ServiceDeployment"][];
    };
    ParseError: {
      code: components["schemas"]["ParseErrorCodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `parse_error` - Parse Error
     * @enum {string}
     */
    ParseErrorCodeEnum: "parse_error";
    ParseErrorResponse: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["ParseError"][];
    };
    PatchedCreateEnvironmentRequestRequest: {
      name?: string;
    };
    PatchedDockerServiceUpdateRequestRequest: {
      slug?: string;
    };
    PatchedProjectUpdateRequestRequest: {
      slug?: string;
      description?: string;
    };
    PatchedServiceRequest: {
      id?: string;
      slug?: string;
      type?: components["schemas"]["ServiceTypeEnum"];
      image?: string | null;
      command?: string | null;
      builder?: components["schemas"]["GitServiceBuilderEnum"] | components["schemas"]["NullEnum"] | null;
      /** Format: uri */
      repository_url?: string | null;
      branch_name?: string | null;
      commit_sha?: string | null;
      dockerfile_builder_options?: components["schemas"]["DockerfileBuilderOptionsRequest"] | null;
      credentials?: components["schemas"]["DockerCredentialRequest"] | null;
      deploy_token?: string | null;
      network_alias?: string | null;
      resource_limits?: components["schemas"]["ResourceLimitsRequest"] | null;
      /** @default [] */
      system_env_variables?: components["schemas"]["SystemEnvVariablesRequest"][];
    };
    PatchedSharedEnvVariableRequest: {
      key?: string;
      value?: string;
    };
    /**
     * @description * `pong` - pong
     * @enum {string}
     */
    PingEnum: "pong";
    PingErrorResponse400: components["schemas"]["ParseErrorResponse"];
    PortConfiguration: {
      id: string;
      host: number;
      forwarded: number;
    };
    PortConfigurationRequest: {
      id?: string;
      host?: number;
      forwarded: number;
    };
    /**
     * @description * `ports` - ports
     * @enum {string}
     */
    PortItemChangeFieldEnum: "ports";
    PortItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["ServicePortsRequestRequest"];
      field: components["schemas"]["PortItemChangeFieldEnum"];
    };
    Project: {
      environments: readonly components["schemas"]["Environment"][];
      description: string | null;
      id: string;
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      healthy_services: number;
      total_services: number;
    };
    ProjectCreateRequestRequest: {
      slug?: string;
      description?: string;
    };
    ProjectSearch: {
      id: string;
      /** Format: date-time */
      created_at: string;
      slug: string;
      /** @default project */
      type: components["schemas"]["ProjectSearchTypeEnum"];
    };
    /**
     * @description * `project` - project
     * @enum {string}
     */
    ProjectSearchTypeEnum: "project";
    ProjectsServiceDetailsDockerDeploymentsHttpLogsFieldsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListError: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListTimeErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestMethodErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestQueryErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestIdErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListSortByErrorComponent"];
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestIdErrorComponent: {
      /**
       * @description * `request_id` - request_id
       * @enum {string}
       */
      attr: "request_id";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestMethodErrorComponent: {
      /**
       * @description * `request_method` - request_method
       * @enum {string}
       */
      attr: "request_method";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestQueryErrorComponent: {
      /**
       * @description * `request_query` - request_query
       * @enum {string}
       */
      attr: "request_query";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsListError: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListStatusErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListQueuedAtErrorComponent"];
    ProjectsServiceDetailsDockerDeploymentsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsListQueuedAtErrorComponent: {
      /**
       * @description * `queued_at` - queued_at
       * @enum {string}
       */
      attr: "queued_at";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListStatusErrorComponent: {
      /**
       * @description * `status` - status
       * @enum {string}
       */
      attr: "status";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsMetricsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerHttpLogsFieldsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerHttpLogsListError: components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListTimeErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListRequestMethodErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListRequestQueryErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListRequestIdErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListSortByErrorComponent"];
    ProjectsServiceDetailsDockerHttpLogsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerHttpLogsListRequestIdErrorComponent: {
      /**
       * @description * `request_id` - request_id
       * @enum {string}
       */
      attr: "request_id";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerHttpLogsListRequestMethodErrorComponent: {
      /**
       * @description * `request_method` - request_method
       * @enum {string}
       */
      attr: "request_method";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerHttpLogsListRequestQueryErrorComponent: {
      /**
       * @description * `request_query` - request_query
       * @enum {string}
       */
      attr: "request_query";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerHttpLogsListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ProjectsServiceDetailsDockerHttpLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerHttpLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListError"][];
    };
    ProjectsServiceDetailsDockerHttpLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerMetricsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceListListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesCreateError: components["schemas"]["ProjectsVariablesCreateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsVariablesCreateKeyErrorComponent"] | components["schemas"]["ProjectsVariablesCreateValueErrorComponent"];
    ProjectsVariablesCreateErrorResponse400: components["schemas"]["ProjectsVariablesCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesCreateKeyErrorComponent: {
      /**
       * @description * `key` - key
       * @enum {string}
       */
      attr: "key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsVariablesCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsVariablesCreateError"][];
    };
    ProjectsVariablesCreateValueErrorComponent: {
      /**
       * @description * `value` - value
       * @enum {string}
       */
      attr: "value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesDestroyErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesPartialUpdateError: components["schemas"]["ProjectsVariablesPartialUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsVariablesPartialUpdateKeyErrorComponent"] | components["schemas"]["ProjectsVariablesPartialUpdateValueErrorComponent"];
    ProjectsVariablesPartialUpdateErrorResponse400: components["schemas"]["ProjectsVariablesPartialUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesPartialUpdateKeyErrorComponent: {
      /**
       * @description * `key` - key
       * @enum {string}
       */
      attr: "key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsVariablesPartialUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsVariablesPartialUpdateError"][];
    };
    ProjectsVariablesPartialUpdateValueErrorComponent: {
      /**
       * @description * `value` - value
       * @enum {string}
       */
      attr: "value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesUpdateError: components["schemas"]["ProjectsVariablesUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsVariablesUpdateKeyErrorComponent"] | components["schemas"]["ProjectsVariablesUpdateValueErrorComponent"];
    ProjectsVariablesUpdateErrorResponse400: components["schemas"]["ProjectsVariablesUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesUpdateKeyErrorComponent: {
      /**
       * @description * `key` - key
       * @enum {string}
       */
      attr: "key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsVariablesUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsVariablesUpdateError"][];
    };
    ProjectsVariablesUpdateValueErrorComponent: {
      /**
       * @description * `value` - value
       * @enum {string}
       */
      attr: "value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RedeployDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    RegenerateServiceDeployTokenBranchNameErrorComponent: {
      /**
       * @description * `branch_name` - branch_name
       * @enum {string}
       */
      attr: "branch_name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenBuilderErrorComponent: {
      /**
       * @description * `builder` - builder
       * @enum {string}
       */
      attr: "builder";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    RegenerateServiceDeployTokenCommandErrorComponent: {
      /**
       * @description * `command` - command
       * @enum {string}
       */
      attr: "command";
      /**
       * @description * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenCommitShaErrorComponent: {
      /**
       * @description * `commit_sha` - commit_sha
       * @enum {string}
       */
      attr: "commit_sha";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenDeployTokenErrorComponent: {
      /**
       * @description * `deploy_token` - deploy_token
       * @enum {string}
       */
      attr: "deploy_token";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * * `unique` - unique
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed" | "unique";
      detail: string;
    };
    RegenerateServiceDeployTokenDockerfileBuilderOptionsBuildContextDirErrorComponent: {
      /**
       * @description * `dockerfile_builder_options.build_context_dir` - dockerfile_builder_options.build_context_dir
       * @enum {string}
       */
      attr: "dockerfile_builder_options.build_context_dir";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenDockerfileBuilderOptionsDockerfilePathErrorComponent: {
      /**
       * @description * `dockerfile_builder_options.dockerfile_path` - dockerfile_builder_options.dockerfile_path
       * @enum {string}
       */
      attr: "dockerfile_builder_options.dockerfile_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenDockerfileBuilderOptionsNonFieldErrorsErrorComponent: {
      /**
       * @description * `dockerfile_builder_options.non_field_errors` - dockerfile_builder_options.non_field_errors
       * @enum {string}
       */
      attr: "dockerfile_builder_options.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenError: components["schemas"]["RegenerateServiceDeployTokenNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenIdErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSlugErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenTypeErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenImageErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenCommandErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenBuilderErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenRepositoryUrlErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenBranchNameErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenCommitShaErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenDockerfileBuilderOptionsNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenDockerfileBuilderOptionsDockerfilePathErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenDockerfileBuilderOptionsBuildContextDirErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenCredentialsUsernameErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenCredentialsPasswordErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenDeployTokenErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenNetworkAliasErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenResourceLimitsNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenResourceLimitsCpusErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenResourceLimitsMemoryNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenResourceLimitsMemoryValueErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenResourceLimitsMemoryUnitErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSystemEnvVariablesNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSystemEnvVariablesINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSystemEnvVariablesINDEXKeyErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSystemEnvVariablesINDEXValueErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSystemEnvVariablesINDEXCommentErrorComponent"];
    RegenerateServiceDeployTokenErrorResponse400: components["schemas"]["RegenerateServiceDeployTokenValidationError"] | components["schemas"]["ParseErrorResponse"];
    RegenerateServiceDeployTokenIdErrorComponent: {
      /**
       * @description * `id` - id
       * @enum {string}
       */
      attr: "id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * * `unique` - unique
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed" | "unique";
      detail: string;
    };
    RegenerateServiceDeployTokenImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenNetworkAliasErrorComponent: {
      /**
       * @description * `network_alias` - network_alias
       * @enum {string}
       */
      attr: "network_alias";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RegenerateServiceDeployTokenRepositoryUrlErrorComponent: {
      /**
       * @description * `repository_url` - repository_url
       * @enum {string}
       */
      attr: "repository_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenResourceLimitsCpusErrorComponent: {
      /**
       * @description * `resource_limits.cpus` - resource_limits.cpus
       * @enum {string}
       */
      attr: "resource_limits.cpus";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenResourceLimitsMemoryNonFieldErrorsErrorComponent: {
      /**
       * @description * `resource_limits.memory.non_field_errors` - resource_limits.memory.non_field_errors
       * @enum {string}
       */
      attr: "resource_limits.memory.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenResourceLimitsMemoryUnitErrorComponent: {
      /**
       * @description * `resource_limits.memory.unit` - resource_limits.memory.unit
       * @enum {string}
       */
      attr: "resource_limits.memory.unit";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenResourceLimitsMemoryValueErrorComponent: {
      /**
       * @description * `resource_limits.memory.value` - resource_limits.memory.value
       * @enum {string}
       */
      attr: "resource_limits.memory.value";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenResourceLimitsNonFieldErrorsErrorComponent: {
      /**
       * @description * `resource_limits.non_field_errors` - resource_limits.non_field_errors
       * @enum {string}
       */
      attr: "resource_limits.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "required";
      detail: string;
    };
    RegenerateServiceDeployTokenSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenSystemEnvVariablesINDEXCommentErrorComponent: {
      /**
       * @description * `system_env_variables.INDEX.comment` - system_env_variables.INDEX.comment
       * @enum {string}
       */
      attr: "system_env_variables.INDEX.comment";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenSystemEnvVariablesINDEXKeyErrorComponent: {
      /**
       * @description * `system_env_variables.INDEX.key` - system_env_variables.INDEX.key
       * @enum {string}
       */
      attr: "system_env_variables.INDEX.key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenSystemEnvVariablesINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `system_env_variables.INDEX.non_field_errors` - system_env_variables.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "system_env_variables.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RegenerateServiceDeployTokenSystemEnvVariablesINDEXValueErrorComponent: {
      /**
       * @description * `system_env_variables.INDEX.value` - system_env_variables.INDEX.value
       * @enum {string}
       */
      attr: "system_env_variables.INDEX.value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenSystemEnvVariablesNonFieldErrorsErrorComponent: {
      /**
       * @description * `system_env_variables.non_field_errors` - system_env_variables.non_field_errors
       * @enum {string}
       */
      attr: "system_env_variables.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    RegenerateServiceDeployTokenTypeErrorComponent: {
      /**
       * @description * `type` - type
       * @enum {string}
       */
      attr: "type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RegenerateServiceDeployTokenValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RegenerateServiceDeployTokenError"][];
    };
    RequestDeploymentChangesError: components["schemas"]["RequestDeploymentChangesNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesTypeErrorComponent"] | components["schemas"]["RequestDeploymentChangesItemIdErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueDomainErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueBasePathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueStripPrefixErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueRedirectToNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueRedirectToUrlErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueRedirectToPermanentErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueAssociatedPortErrorComponent"] | components["schemas"]["RequestDeploymentChangesFieldErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueNameErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueContainerPathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueHostPathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueModeErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueKeyErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueValueErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueHostErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueForwardedErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueImageErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueCredentialsUsernameErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueCredentialsPasswordErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueTypeErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueTimeoutSecondsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueIntervalSecondsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueCpusErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMemoryNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMemoryValueErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMemoryUnitErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueContentsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMountPathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueLanguageErrorComponent"];
    RequestDeploymentChangesErrorResponse400: components["schemas"]["RequestDeploymentChangesValidationError"] | components["schemas"]["ParseErrorResponse"];
    RequestDeploymentChangesFieldErrorComponent: {
      /**
       * @description * `field` - field
       * @enum {string}
       */
      attr: "field";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesItemIdErrorComponent: {
      /**
       * @description * `item_id` - item_id
       * @enum {string}
       */
      attr: "item_id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueAssociatedPortErrorComponent: {
      /**
       * @description * `new_value.associated_port` - new_value.associated_port
       * @enum {string}
       */
      attr: "new_value.associated_port";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueBasePathErrorComponent: {
      /**
       * @description * `new_value.base_path` - new_value.base_path
       * @enum {string}
       */
      attr: "new_value.base_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueContainerPathErrorComponent: {
      /**
       * @description * `new_value.container_path` - new_value.container_path
       * @enum {string}
       */
      attr: "new_value.container_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueContentsErrorComponent: {
      /**
       * @description * `new_value.contents` - new_value.contents
       * @enum {string}
       */
      attr: "new_value.contents";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueCpusErrorComponent: {
      /**
       * @description * `new_value.cpus` - new_value.cpus
       * @enum {string}
       */
      attr: "new_value.cpus";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.credentials.non_field_errors` - new_value.credentials.non_field_errors
       * @enum {string}
       */
      attr: "new_value.credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueCredentialsPasswordErrorComponent: {
      /**
       * @description * `new_value.credentials.password` - new_value.credentials.password
       * @enum {string}
       */
      attr: "new_value.credentials.password";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueCredentialsUsernameErrorComponent: {
      /**
       * @description * `new_value.credentials.username` - new_value.credentials.username
       * @enum {string}
       */
      attr: "new_value.credentials.username";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueDomainErrorComponent: {
      /**
       * @description * `new_value.domain` - new_value.domain
       * @enum {string}
       */
      attr: "new_value.domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueErrorComponent: {
      /**
       * @description * `new_value` - new_value
       * @enum {string}
       */
      attr: "new_value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueForwardedErrorComponent: {
      /**
       * @description * `new_value.forwarded` - new_value.forwarded
       * @enum {string}
       */
      attr: "new_value.forwarded";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueHostErrorComponent: {
      /**
       * @description * `new_value.host` - new_value.host
       * @enum {string}
       */
      attr: "new_value.host";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueHostPathErrorComponent: {
      /**
       * @description * `new_value.host_path` - new_value.host_path
       * @enum {string}
       */
      attr: "new_value.host_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueImageErrorComponent: {
      /**
       * @description * `new_value.image` - new_value.image
       * @enum {string}
       */
      attr: "new_value.image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueIntervalSecondsErrorComponent: {
      /**
       * @description * `new_value.interval_seconds` - new_value.interval_seconds
       * @enum {string}
       */
      attr: "new_value.interval_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueKeyErrorComponent: {
      /**
       * @description * `new_value.key` - new_value.key
       * @enum {string}
       */
      attr: "new_value.key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueLanguageErrorComponent: {
      /**
       * @description * `new_value.language` - new_value.language
       * @enum {string}
       */
      attr: "new_value.language";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueMemoryNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.memory.non_field_errors` - new_value.memory.non_field_errors
       * @enum {string}
       */
      attr: "new_value.memory.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueMemoryUnitErrorComponent: {
      /**
       * @description * `new_value.memory.unit` - new_value.memory.unit
       * @enum {string}
       */
      attr: "new_value.memory.unit";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueMemoryValueErrorComponent: {
      /**
       * @description * `new_value.memory.value` - new_value.memory.value
       * @enum {string}
       */
      attr: "new_value.memory.value";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueModeErrorComponent: {
      /**
       * @description * `new_value.mode` - new_value.mode
       * @enum {string}
       */
      attr: "new_value.mode";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueMountPathErrorComponent: {
      /**
       * @description * `new_value.mount_path` - new_value.mount_path
       * @enum {string}
       */
      attr: "new_value.mount_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueNameErrorComponent: {
      /**
       * @description * `new_value.name` - new_value.name
       * @enum {string}
       */
      attr: "new_value.name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.non_field_errors` - new_value.non_field_errors
       * @enum {string}
       */
      attr: "new_value.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueRedirectToNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.redirect_to.non_field_errors` - new_value.redirect_to.non_field_errors
       * @enum {string}
       */
      attr: "new_value.redirect_to.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueRedirectToPermanentErrorComponent: {
      /**
       * @description * `new_value.redirect_to.permanent` - new_value.redirect_to.permanent
       * @enum {string}
       */
      attr: "new_value.redirect_to.permanent";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueRedirectToUrlErrorComponent: {
      /**
       * @description * `new_value.redirect_to.url` - new_value.redirect_to.url
       * @enum {string}
       */
      attr: "new_value.redirect_to.url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueStripPrefixErrorComponent: {
      /**
       * @description * `new_value.strip_prefix` - new_value.strip_prefix
       * @enum {string}
       */
      attr: "new_value.strip_prefix";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueTimeoutSecondsErrorComponent: {
      /**
       * @description * `new_value.timeout_seconds` - new_value.timeout_seconds
       * @enum {string}
       */
      attr: "new_value.timeout_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueTypeErrorComponent: {
      /**
       * @description * `new_value.type` - new_value.type
       * @enum {string}
       */
      attr: "new_value.type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueValueErrorComponent: {
      /**
       * @description * `new_value.value` - new_value.value
       * @enum {string}
       */
      attr: "new_value.value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RequestDeploymentChangesTypeErrorComponent: {
      /**
       * @description * `type` - type
       * @enum {string}
       */
      attr: "type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RequestDeploymentChangesError"][];
    };
    RequestEnvChangesError: components["schemas"]["RequestEnvChangesNonFieldErrorsErrorComponent"] | components["schemas"]["RequestEnvChangesNewValueErrorComponent"];
    RequestEnvChangesErrorResponse400: components["schemas"]["RequestEnvChangesValidationError"] | components["schemas"]["ParseErrorResponse"];
    RequestEnvChangesNewValueErrorComponent: {
      /**
       * @description * `new_value` - new_value
       * @enum {string}
       */
      attr: "new_value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestEnvChangesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RequestEnvChangesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RequestEnvChangesError"][];
    };
    /**
     * @description * `GET` - GET
     * * `POST` - POST
     * * `PUT` - PUT
     * * `DELETE` - DELETE
     * * `PATCH` - PATCH
     * * `OPTIONS` - OPTIONS
     * * `HEAD` - HEAD
     * @enum {string}
     */
    RequestMethodEnum: "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "OPTIONS" | "HEAD";
    /**
     * @description * `HTTP/1.0` - HTTP/1.0
     * * `HTTP/1.1` - HTTP/1.1
     * * `HTTP/2.0` - HTTP/2.0
     * * `HTTP/3.0` - HTTP/3.0
     * @enum {string}
     */
    RequestProtocolEnum: "HTTP/1.0" | "HTTP/1.1" | "HTTP/2.0" | "HTTP/3.0";
    ResourceLimit: {
      no_of_cpus: number;
      max_memory_in_bytes: number;
    };
    /**
     * @description * `resource_limits` - resource_limits
     * @enum {string}
     */
    ResourceLimitChangeFieldEnum: "resource_limits";
    ResourceLimitChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["ResourceLimitsRequestRequest"] | null;
      field: components["schemas"]["ResourceLimitChangeFieldEnum"];
    };
    ResourceLimits: {
      /** Format: double */
      cpus: number | null;
      memory: components["schemas"]["MemoryLimit"] | null;
    };
    ResourceLimitsRequest: {
      /** Format: double */
      cpus: number | null;
      memory: components["schemas"]["MemoryLimitRequest"] | null;
    };
    ResourceLimitsRequestRequest: {
      /** Format: double */
      cpus?: number;
      memory?: components["schemas"]["MemoryLimitRequestRequest"];
    };
    ResourceResponse: components["schemas"]["ServiceSearch"] | components["schemas"]["ProjectSearch"];
    RuntimeLog: {
      id: string;
      service_id: string | null;
      deployment_id: string | null;
      /** Format: date-time */
      time: string;
      timestamp: number;
      content: unknown;
      content_text: string | null;
      level: components["schemas"]["LevelEnum"];
      source: components["schemas"]["SourceEnum"];
    };
    RuntimeLogsSearch: {
      previous: string | null;
      next: string | null;
      results: components["schemas"]["RuntimeLog"][];
      /** Format: double */
      query_time_ms: number;
    };
    SearchDockerRegistryErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SearchResourcesErrorResponse400: components["schemas"]["ParseErrorResponse"];
    Service: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id: string;
      slug: string;
      type: components["schemas"]["ServiceTypeEnum"];
      image: string | null;
      command: string | null;
      builder: components["schemas"]["GitServiceBuilderEnum"] | components["schemas"]["NullEnum"] | null;
      /** Format: uri */
      repository_url: string | null;
      branch_name: string | null;
      commit_sha: string | null;
      dockerfile_builder_options: components["schemas"]["DockerfileBuilderOptions"] | null;
      healthcheck: components["schemas"]["HealthCheck"] | null;
      project_id: string;
      environment: components["schemas"]["Environment"];
      credentials: components["schemas"]["DockerCredential"] | null;
      urls: readonly components["schemas"]["URLModel"][];
      volumes: readonly components["schemas"]["Volume"][];
      deploy_token: string | null;
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: readonly components["schemas"]["EnvVariable"][];
      network_aliases: readonly string[];
      network_alias: string | null;
      unapplied_changes: readonly components["schemas"]["DeploymentChange"][];
      resource_limits: components["schemas"]["ResourceLimits"] | null;
      /** @default [] */
      system_env_variables: components["schemas"]["SystemEnvVariables"][];
      configs: readonly components["schemas"]["Config"][];
    };
    ServiceCardResponse: components["schemas"]["DockerServiceCard"] | components["schemas"]["GitServiceCard"];
    ServiceDeployment: {
      is_current_production: boolean;
      slot: components["schemas"]["SlotEnum"];
      /** Format: date-time */
      queued_at: string;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      finished_at: string | null;
      redeploy_hash: string | null;
      hash: string;
      status: components["schemas"]["ServiceDeploymentStatusEnum"];
      status_reason: string | null;
      urls: readonly components["schemas"]["ServiceDeploymentURL"][];
      network_aliases: readonly string[];
      unprefixed_hash: string;
      service_snapshot: components["schemas"]["DeploymentDocker"];
      changes: readonly components["schemas"]["DeploymentChange"][];
      commit_message: string;
      commit_sha: string | null;
    };
    /**
     * @description * `QUEUED` - Queued
     * * `CANCELLED` - Cancelled
     * * `CANCELLING` - Cancelling
     * * `FAILED` - Failed
     * * `PREPARING` - Preparing
     * * `BUILDING` - Building
     * * `STARTING` - Starting
     * * `RESTARTING` - Restarting
     * * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `REMOVED` - Removed
     * * `SLEEPING` - Sleeping
     * @enum {string}
     */
    ServiceDeploymentStatusEnum: "QUEUED" | "CANCELLED" | "CANCELLING" | "FAILED" | "PREPARING" | "BUILDING" | "STARTING" | "RESTARTING" | "HEALTHY" | "UNHEALTHY" | "REMOVED" | "SLEEPING";
    ServiceDeploymentURL: {
      /** Format: uri */
      domain: string;
      port: number;
    };
    ServiceMetrics: {
      /** Format: date-time */
      bucket_epoch: string;
      /** Format: double */
      avg_cpu: number;
      /** Format: double */
      avg_memory: number;
      total_net_tx: number;
      total_net_rx: number;
      total_disk_read: number;
      total_disk_write: number;
    };
    ServicePortsRequestRequest: {
      host: number;
      forwarded: number;
    };
    ServiceSearch: {
      id: string;
      project_slug: string;
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** @default service */
      type: components["schemas"]["ServiceSearchTypeEnum"];
      environment: string;
    };
    /**
     * @description * `service` - service
     * @enum {string}
     */
    ServiceSearchTypeEnum: "service";
    /**
     * @description * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `FAILED` - Failed
     * * `SLEEPING` - Sleeping
     * * `NOT_DEPLOYED_YET` - Not deployed yet
     * * `DEPLOYING` - Deploying
     * @enum {string}
     */
    ServiceStatusEnum: "HEALTHY" | "UNHEALTHY" | "FAILED" | "SLEEPING" | "NOT_DEPLOYED_YET" | "DEPLOYING";
    /**
     * @description * `DOCKER_REGISTRY` - Docker repository
     * * `GIT_REPOSITORY` - Git repository
     * @enum {string}
     */
    ServiceTypeEnum: "DOCKER_REGISTRY" | "GIT_REPOSITORY";
    Settings: {
      root_domain: string;
      image_version: string;
      commit_sha: string;
    };
    SharedEnvVariable: {
      id: string;
      key: string;
      value: string;
    };
    SharedEnvVariableRequest: {
      key: string;
      value?: string;
    };
    /**
     * @description * `BLUE` - Blue
     * * `GREEN` - Green
     * @enum {string}
     */
    SlotEnum: "BLUE" | "GREEN";
    /**
     * @description * `SYSTEM` - System Logs
     * * `SERVICE` - Service Logs
     * @enum {string}
     */
    SourceEnum: "SYSTEM" | "SERVICE";
    SystemEnvVariables: {
      key: string;
      value: string;
      comment: string;
    };
    SystemEnvVariablesRequest: {
      key: string;
      value: string;
      comment: string;
    };
    ToggleServiceDesiredStateErrorComponent: {
      /**
       * @description * `desired_state` - desired_state
       * @enum {string}
       */
      attr: "desired_state";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    ToggleServiceError: components["schemas"]["ToggleServiceNonFieldErrorsErrorComponent"] | components["schemas"]["ToggleServiceDesiredStateErrorComponent"];
    ToggleServiceErrorResponse400: components["schemas"]["ToggleServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    ToggleServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ToggleServiceStateRequestRequest: {
      desired_state: components["schemas"]["DesiredStateEnum"];
    };
    ToggleServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ToggleServiceError"][];
    };
    TriggerUpdateCreateDesiredVersionErrorComponent: {
      /**
       * @description * `desired_version` - desired_version
       * @enum {string}
       */
      attr: "desired_version";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    TriggerUpdateCreateError: components["schemas"]["TriggerUpdateCreateNonFieldErrorsErrorComponent"] | components["schemas"]["TriggerUpdateCreateDesiredVersionErrorComponent"];
    TriggerUpdateCreateErrorResponse400: components["schemas"]["TriggerUpdateCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    TriggerUpdateCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    TriggerUpdateCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["TriggerUpdateCreateError"][];
    };
    /**
     * @description * `urls` - urls
     * @enum {string}
     */
    URLItemChangeFieldEnum: "urls";
    URLItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["URLRequestRequest"];
      field: components["schemas"]["URLItemChangeFieldEnum"];
    };
    URLModel: {
      id: string;
      domain: string;
      /** @default / */
      base_path: string;
      strip_prefix: boolean;
      redirect_to: components["schemas"]["URLRedirectModel"] | null;
      associated_port: number | null;
    };
    URLModelRequest: {
      id?: string;
      domain: string;
      /** @default / */
      base_path?: string;
      strip_prefix?: boolean;
      redirect_to: components["schemas"]["URLRedirectModelRequest"] | null;
      associated_port?: number | null;
    };
    URLRedirectModel: {
      /** Format: uri */
      url: string;
      /** @default false */
      permanent: boolean;
    };
    URLRedirectModelRequest: {
      /** Format: uri */
      url: string;
      /** @default false */
      permanent?: boolean;
    };
    URLRedirectRequest: {
      /** Format: uri */
      url: string;
      /** @default false */
      permanent?: boolean;
    };
    URLRequestRequest: {
      domain?: string;
      /** @default / */
      base_path?: string;
      /** @default true */
      strip_prefix?: boolean;
      redirect_to?: components["schemas"]["URLRedirectRequest"];
      associated_port?: number;
    };
    /**
     * @description * `BYTES` - bytes
     * * `KILOBYTES` - kilobytes
     * * `MEGABYTES` - megabytes
     * * `GIGABYTES` - gigabytes
     * @enum {string}
     */
    UnitEnum: "BYTES" | "KILOBYTES" | "MEGABYTES" | "GIGABYTES";
    UpdateEnvironmentError: components["schemas"]["UpdateEnvironmentNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateEnvironmentNameErrorComponent"];
    UpdateEnvironmentErrorResponse400: components["schemas"]["UpdateEnvironmentValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateEnvironmentNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateEnvironmentNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateEnvironmentValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateEnvironmentError"][];
    };
    UpdateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectError: components["schemas"]["UpdateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateProjectSlugErrorComponent"] | components["schemas"]["UpdateProjectDescriptionErrorComponent"];
    UpdateProjectErrorResponse400: components["schemas"]["UpdateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateProjectError"][];
    };
    UpdateServiceError: components["schemas"]["UpdateServiceNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateServiceSlugErrorComponent"];
    UpdateServiceErrorResponse400: components["schemas"]["UpdateServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateServiceError"][];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name: string;
      last_name: string;
    };
    UserCreatedResponse: {
      detail: string;
    };
    UserCreationRequestRequest: {
      username: string;
      password: string;
    };
    UserExistenceResponse: {
      exists: boolean;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: "validation_error";
    Volume: {
      id: string;
      name: string;
      container_path: string;
      host_path: string | null;
      mode: components["schemas"]["VolumeModeEnum"];
    };
    /**
     * @description * `volumes` - volumes
     * @enum {string}
     */
    VolumeItemChangeFieldEnum: "volumes";
    VolumeItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["VolumeRequestRequest"];
      field: components["schemas"]["VolumeItemChangeFieldEnum"];
    };
    /**
     * @description * `READ_ONLY` - Read-Only
     * * `READ_WRITE` - Read-Write
     * @enum {string}
     */
    VolumeModeEnum: "READ_ONLY" | "READ_WRITE";
    VolumeRequest: {
      id?: string;
      name: string;
      container_path: string;
      host_path?: string | null;
      mode?: components["schemas"]["VolumeModeEnum"];
    };
    /**
     * @description * `READ_ONLY` - READ_ONLY
     * * `READ_WRITE` - READ_WRITE
     * @enum {string}
     */
    VolumeRequestModeEnum: "READ_ONLY" | "READ_WRITE";
    VolumeRequestRequest: {
      name?: string;
      container_path: string;
      host_path?: string;
      mode?: components["schemas"]["VolumeRequestModeEnum"];
    };
    WebhookDeployServiceCommitMessageErrorComponent: {
      /**
       * @description * `commit_message` - commit_message
       * @enum {string}
       */
      attr: "commit_message";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookDeployServiceError: components["schemas"]["WebhookDeployServiceNonFieldErrorsErrorComponent"] | components["schemas"]["WebhookDeployServiceCommitMessageErrorComponent"] | components["schemas"]["WebhookDeployServiceNewImageErrorComponent"];
    WebhookDeployServiceErrorResponse400: components["schemas"]["WebhookDeployServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    WebhookDeployServiceNewImageErrorComponent: {
      /**
       * @description * `new_image` - new_image
       * @enum {string}
       */
      attr: "new_image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookDeployServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    WebhookDeployServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["WebhookDeployServiceError"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List archived projects */
  getArchivedProjectList: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `archived_at` - Archived at
         * * `-archived_at` - Archived at (descending)
         */
        sort_by?: ("-archived_at" | "-slug" | "archived_at" | "slug")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedArchivedProjectList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetArchivedProjectListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Check if a user exists
   * @description Returns whether a single user already exists in the system.
   */
  auth_check_user_existence_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserExistenceResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["AuthCheckUserExistenceRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a user
   * @description Creates a new user if no user exists.
   */
  auth_create_initial_user_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreationRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UserCreationRequestRequest"];
        "multipart/form-data": components["schemas"]["UserCreationRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserCreatedResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["AuthCreateInitialUserCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Login
   * @description Authenticate User, what is returned is a cookie named `sessionid` that will be used for authentication of the next requests.
   */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequestRequest"];
        "multipart/form-data": components["schemas"]["LoginRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      /** @description No response body */
      302: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Logout */
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LogoutErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get current user
   * @description Get current authenticated user.
   */
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAuthedUserErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get CSRF cookie
   * @description CSRF cookie endpoint for retrieving a CSRF token before doing mutative requests (`DELETE`, `POST`, `PUT`, `PATCH`).You need to pass the cookie named `csrftoken` to all requests alongside a `X-CSRFToken` with the value of the token.
   */
  getCSRF: {
    responses: {
      400: {
        content: {
          "application/json": components["schemas"]["GetCSRFErrorResponse400"];
        };
      };
      /** @description No response body */
      401: {
        content: never;
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Webhook to deploy a docker service
   * @description trigger a new deployment.
   */
  webhookDeployService: {
    parameters: {
      path: {
        deploy_token: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DockerServiceWebhookDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceWebhookDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceWebhookDeployRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["WebhookDeployServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Check Port
   * @description Check If Port is available on host machine
   */
  checkIfPortIsAvailable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerPortCheckRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerPortCheckRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerPortCheckRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CheckIfPortIsAvailableErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Search docker hub
   * @description Search a docker Image in docker hub Registry
   */
  searchDockerRegistry: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerImageSearchResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchDockerRegistryErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Ping
   * @description simple healthcheck endpoint.
   */
  ping: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PING"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["PingErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all active projects */
  getProjectList: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `updated_at` - Updated at
         * * `-updated_at` - Updated at (descending)
         */
        sort_by?: ("-slug" | "-updated_at" | "slug" | "updated_at")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProjectList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetProjectListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Create a new project */
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectCreateRequestRequest"];
        "multipart/form-data": components["schemas"]["ProjectCreateRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Archive a docker service
   * @description Archive a service created from a docker image.
   */
  archiveDockerService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Stop/Restart multiple services
   * @description Stops a running docker service and restart it if it was stopped.
   */
  bulkToggleServices: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkToggleServiceStateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["BulkToggleServiceStateRequestRequest"];
        "multipart/form-data": components["schemas"]["BulkToggleServiceStateRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BulkToggleServicesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cancel deployment
   * @description Cancel a deployment in progress.
   */
  cancelDockerServiceDeployment: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CancelDockerServiceDeploymentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cancel a config change
   * @description Cancel a config change that was requested.
   */
  cancelDeploymentChanges: {
    parameters: {
      path: {
        change_id: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["CancelDeploymentChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a docker service
   * @description Create a service from a docker image.
   */
  createDockerService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a docker service
   * @description Create a service from a docker image.
   */
  createGitService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateGitServiceRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGitServiceRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateGitServiceRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateGitServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Deploy a docker service
   * @description Apply all pending changes for the service and trigger a new deployment.
   */
  deployDockerService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DockerServiceDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceDeployRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DeployDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Redeploy a docker service
   * @description Revert the service to the state of a previous deployment.
   */
  redeployDockerService: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RedeployDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Deploy a git service
   * @description Apply all pending changes for the service and trigger a new deployment.
   */
  deployGitService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GitServiceDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GitServiceDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["GitServiceDeployRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DeployGitServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Request env changes
   * @description Request a change to the environments variables of a service.
   */
  requestEnvChanges: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnvStringChangeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EnvStringChangeRequest"];
        "multipart/form-data": components["schemas"]["EnvStringChangeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RequestEnvChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Request config changes
   * @description Request a change to the configuration of a service.
   */
  requestDeploymentChanges: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeploymentChangeRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentChangeRequestRequest"];
        "multipart/form-data": components["schemas"]["DeploymentChangeRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RequestDeploymentChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get single service
   * @description See all the details of a service.
   */
  getDockerService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update a service */
  updateService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDockerServiceUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDockerServiceUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedDockerServiceUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * List all deployments
   * @description List all deployments for a service, the default order is last created descendant.
   */
  projects_service_details_docker_deployments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        queued_at_after?: string;
        queued_at_before?: string;
        /**
         * @description * `QUEUED` - Queued
         * * `CANCELLED` - Cancelled
         * * `CANCELLING` - Cancelling
         * * `FAILED` - Failed
         * * `PREPARING` - Preparing
         * * `BUILDING` - Building
         * * `STARTING` - Starting
         * * `RESTARTING` - Restarting
         * * `HEALTHY` - Healthy
         * * `UNHEALTHY` - Unhealthy
         * * `REMOVED` - Removed
         * * `SLEEPING` - Sleeping
         */
        status?: ("BUILDING" | "CANCELLED" | "CANCELLING" | "FAILED" | "HEALTHY" | "PREPARING" | "QUEUED" | "REMOVED" | "RESTARTING" | "SLEEPING" | "STARTING" | "UNHEALTHY")[];
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedServiceDeploymentList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single deployment */
  projects_service_details_docker_deployments_retrieve: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment HTTP logs */
  projects_service_details_docker_deployments_http_logs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        per_page?: number;
        /** @description Multiple values may be separated by commas. */
        request_host?: string[];
        request_id?: string;
        /** @description Multiple values may be separated by commas. */
        request_ip?: string[];
        /**
         * @description * `GET` - GET
         * * `POST` - POST
         * * `PUT` - PUT
         * * `DELETE` - DELETE
         * * `PATCH` - PATCH
         * * `OPTIONS` - OPTIONS
         * * `HEAD` - HEAD
         */
        request_method?: ("DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT")[];
        /** @description Multiple values may be separated by commas. */
        request_path?: string[];
        request_query?: string;
        /** @description Multiple values may be separated by commas. */
        request_user_agent?: string[];
        /**
         * @description Ordering
         *
         * * `time` - Time
         * * `-time` - Time (descending)
         * * `request_duration_ns` - Request duration ns
         * * `-request_duration_ns` - Request duration ns (descending)
         */
        sort_by?: ("-request_duration_ns" | "-time" | "request_duration_ns" | "time")[];
        /** @description Multiple values may be separated by commas. */
        status?: string[];
        time_after?: string;
        time_before?: string;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedHttpLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single deployment http log */
  projects_service_details_docker_deployments_http_logs_retrieve: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        request_uuid: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["HttpLog"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment http logs fields values */
  projects_service_details_docker_deployments_http_logs_fields_list: {
    parameters: {
      query: {
        /**
         * @description * `request_host` - request_host
         * * `request_path` - request_path
         * * `request_user_agent` - request_user_agent
         * * `request_ip` - request_ip
         */
        field: "request_host" | "request_path" | "request_user_agent" | "request_ip";
        value: string;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsFieldsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment logs */
  projects_service_details_docker_deployments_logs_retrieve: {
    parameters: {
      query?: {
        cursor?: string;
        level?: ("INFO" | "ERROR")[];
        per_page?: number;
        query?: string;
        source?: ("SERVICE" | "SYSTEM")[];
        time_after?: string;
        time_before?: string;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RuntimeLogsSearch"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service or deployment metrics */
  projects_service_details_docker_deployments_metrics_list: {
    parameters: {
      query?: {
        /**
         * @description * `LAST_HOUR` - LAST_HOUR
         * * `LAST_6HOURS` - LAST_6HOURS
         * * `LAST_DAY` - LAST_DAY
         * * `LAST_WEEK` - LAST_WEEK
         * * `LAST_MONTH` - LAST_MONTH
         */
        time_range?: "LAST_HOUR" | "LAST_6HOURS" | "LAST_DAY" | "LAST_WEEK" | "LAST_MONTH";
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceMetrics"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsMetricsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service HTTP logs */
  projects_service_details_docker_http_logs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        per_page?: number;
        /** @description Multiple values may be separated by commas. */
        request_host?: string[];
        request_id?: string;
        /** @description Multiple values may be separated by commas. */
        request_ip?: string[];
        /**
         * @description * `GET` - GET
         * * `POST` - POST
         * * `PUT` - PUT
         * * `DELETE` - DELETE
         * * `PATCH` - PATCH
         * * `OPTIONS` - OPTIONS
         * * `HEAD` - HEAD
         */
        request_method?: ("DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT")[];
        /** @description Multiple values may be separated by commas. */
        request_path?: string[];
        request_query?: string;
        /** @description Multiple values may be separated by commas. */
        request_user_agent?: string[];
        /**
         * @description Ordering
         *
         * * `time` - Time
         * * `-time` - Time (descending)
         * * `request_duration_ns` - Request duration ns
         * * `-request_duration_ns` - Request duration ns (descending)
         */
        sort_by?: ("-request_duration_ns" | "-time" | "request_duration_ns" | "time")[];
        /** @description Multiple values may be separated by commas. */
        status?: string[];
        time_after?: string;
        time_before?: string;
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedHttpLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerHttpLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single service http log */
  projects_service_details_docker_http_logs_retrieve: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        request_uuid: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["HttpLog"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerHttpLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service http logs fields values */
  projects_service_details_docker_http_logs_fields_list: {
    parameters: {
      query: {
        /**
         * @description * `request_host` - request_host
         * * `request_path` - request_path
         * * `request_user_agent` - request_user_agent
         * * `request_ip` - request_ip
         */
        field: "request_host" | "request_path" | "request_user_agent" | "request_ip";
        value: string;
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerHttpLogsFieldsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service or deployment metrics */
  projects_service_details_docker_metrics_list: {
    parameters: {
      query?: {
        /**
         * @description * `LAST_HOUR` - LAST_HOUR
         * * `LAST_6HOURS` - LAST_6HOURS
         * * `LAST_DAY` - LAST_DAY
         * * `LAST_WEEK` - LAST_WEEK
         * * `LAST_MONTH` - LAST_MONTH
         */
        time_range?: "LAST_HOUR" | "LAST_6HOURS" | "LAST_DAY" | "LAST_WEEK" | "LAST_MONTH";
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceMetrics"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerMetricsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Regenerate service deploy token */
  regenerateServiceDeployToken: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedServiceRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedServiceRequest"];
        "multipart/form-data": components["schemas"]["PatchedServiceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RegenerateServiceDeployTokenErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Stop/Restart a docker service
   * @description Stops a running docker service and restart it if it was stopped.
   */
  toggleService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ToggleServiceStateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ToggleServiceStateRequestRequest"];
        "multipart/form-data": components["schemas"]["ToggleServiceStateRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ToggleServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_list: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_create: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SharedEnvVariableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedEnvVariableRequest"];
        "multipart/form-data": components["schemas"]["SharedEnvVariableRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_retrieve: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_update: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SharedEnvVariableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedEnvVariableRequest"];
        "multipart/form-data": components["schemas"]["SharedEnvVariableRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_destroy: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesDestroyErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_partial_update: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSharedEnvVariableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSharedEnvVariableRequest"];
        "multipart/form-data": components["schemas"]["PatchedSharedEnvVariableRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesPartialUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single project */
  getSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Archive a Project */
  archiveSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update a project */
  updateProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get service list
   * @description Get all services in a project
   */
  projects_service_list_list: {
    parameters: {
      query?: {
        query?: string;
      };
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceCardResponse"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceListListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Clone environment
   * @description Create new environment from another
   */
  cloneEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CloneEnvironmentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CloneEnvironmentRequestRequest"];
        "multipart/form-data": components["schemas"]["CloneEnvironmentRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EnvironmentWithServices"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CloneEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create new environment
   * @description Create empty environment with no services in it
   */
  createNewEnvironment: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEnvironmentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateEnvironmentRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateEnvironmentRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Environment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateNewEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get a single environment */
  getEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EnvironmentWithServices"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Archive environment
   * @description Archive environment with the services inside of it
   */
  archiveEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update an environment */
  updateEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedCreateEnvironmentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedCreateEnvironmentRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedCreateEnvironmentRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Environment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** search for resources (project, service ...) */
  searchResources: {
    parameters: {
      query?: {
        query?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResourceResponse"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchResourcesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get server resource limits
   * @description Get the number of CPUS & memory of the server.
   */
  getServerResouceLimits: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResourceLimit"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetServerResouceLimitsErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get API settings
   * @description Get the settings of the API.
   */
  getAPISettings: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAPISettingsErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Trigger Auto-Update
   * @description Triggers the Docker auto-update workflow using Temporal.
   */
  trigger_update_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutoUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AutoUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["AutoUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AutoUpdateResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["TriggerUpdateCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
}
