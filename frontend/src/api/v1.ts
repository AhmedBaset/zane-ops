/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/login/": {
    post: operations["login"];
  };
  "/api/auth/logout/": {
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    get: operations["getAuthedUser"];
  };
  "/api/csrf/": {
    /** @description CSRF cookie view for retrieving CSRF before doing requests */
    get: operations["csrf_retrieve"];
  };
  "/api/docker/check-port/": {
    post: operations["checkIfPortIsAvailable"];
  };
  "/api/docker/image-search/": {
    get: operations["searchDockerRegistry"];
  };
  "/api/docker/login/": {
    post: operations["dockerLogin"];
  };
  "/api/domain/root/": {
    get: operations["getRootDomain"];
  };
  "/api/projects/": {
    get: operations["getProjectList"];
    post: operations["createProject"];
  };
  "/api/projects/{project_slug}/archive-service/docker/{service_slug}/": {
    delete: operations["archiveDockerService"];
  };
  "/api/projects/{project_slug}/create-service/docker/": {
    post: operations["createDockerService"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/": {
    get: operations["getDockerService"];
  };
  "/api/projects/{slug}/": {
    get: operations["getSingleProject"];
    delete: operations["archiveSingleProject"];
    patch: operations["updateProjectName"];
  };
  "/api/volumes/{volume_id}/size/": {
    get: operations["getVolumeSize"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActiveProjectPaginated: {
      projects: components["schemas"]["Project"][];
      total_count: number;
    };
    ArchiveDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchivedProject: {
      slug?: string;
      /** Format: date-time */
      archived_at: string;
    };
    ArchivedProjectPaginated: {
      projects: components["schemas"]["ArchivedProject"][];
      total_count: number;
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    BaseError: {
      root?: string[];
    };
    BaseErrorResponse: {
      errors: components["schemas"]["BaseError"];
    };
    CSRF: {
      details: string;
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: "client_error";
    CreateDockerServiceCommandErrorComponent: {
      /**
       * @description * `command` - command
       * @enum {string}
       */
      attr: "command";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsRegistryUrlErrorComponent: {
      /**
       * @description * `credentials.registry_url` - credentials.registry_url
       * @enum {string}
       */
      attr: "credentials.registry_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceEnvErrorComponent: {
      /**
       * @description * `env` - env
       * @enum {string}
       */
      attr: "env";
      /**
       * @description * `not_a_dict` - not_a_dict
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_dict" | "null";
      detail: string;
    };
    CreateDockerServiceEnvKEYErrorComponent: {
      /**
       * @description * `env.KEY` - env.KEY
       * @enum {string}
       */
      attr: "env.KEY";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceError: components["schemas"]["CreateDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceSlugErrorComponent"] | components["schemas"]["CreateDockerServiceImageErrorComponent"] | components["schemas"]["CreateDockerServiceCommandErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsUsernameErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsPasswordErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsRegistryUrlErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXDomainErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXBasePathErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXStripPrefixErrorComponent"] | components["schemas"]["CreateDockerServicePortsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServicePortsINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServicePortsINDEXPublicErrorComponent"] | components["schemas"]["CreateDockerServicePortsINDEXForwardedErrorComponent"] | components["schemas"]["CreateDockerServiceEnvErrorComponent"] | components["schemas"]["CreateDockerServiceEnvKEYErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXNameErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXMountPathErrorComponent"];
    CreateDockerServiceErrorResponse400: components["schemas"]["CreateDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateDockerServiceImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateDockerServicePortsINDEXForwardedErrorComponent: {
      /**
       * @description * `ports.INDEX.forwarded` - ports.INDEX.forwarded
       * @enum {string}
       */
      attr: "ports.INDEX.forwarded";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null" | "required";
      detail: string;
    };
    CreateDockerServicePortsINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `ports.INDEX.non_field_errors` - ports.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "ports.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServicePortsINDEXPublicErrorComponent: {
      /**
       * @description * `ports.INDEX.public` - ports.INDEX.public
       * @enum {string}
       */
      attr: "ports.INDEX.public";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null";
      detail: string;
    };
    CreateDockerServicePortsNonFieldErrorsErrorComponent: {
      /**
       * @description * `ports.non_field_errors` - ports.non_field_errors
       * @enum {string}
       */
      attr: "ports.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    CreateDockerServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXBasePathErrorComponent: {
      /**
       * @description * `urls.INDEX.base_path` - urls.INDEX.base_path
       * @enum {string}
       */
      attr: "urls.INDEX.base_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXDomainErrorComponent: {
      /**
       * @description * `urls.INDEX.domain` - urls.INDEX.domain
       * @enum {string}
       */
      attr: "urls.INDEX.domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `urls.INDEX.non_field_errors` - urls.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "urls.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXStripPrefixErrorComponent: {
      /**
       * @description * `urls.INDEX.strip_prefix` - urls.INDEX.strip_prefix
       * @enum {string}
       */
      attr: "urls.INDEX.strip_prefix";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceUrlsNonFieldErrorsErrorComponent: {
      /**
       * @description * `urls.non_field_errors` - urls.non_field_errors
       * @enum {string}
       */
      attr: "urls.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    CreateDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateDockerServiceError"][];
    };
    CreateDockerServiceVolumesINDEXMountPathErrorComponent: {
      /**
       * @description * `volumes.INDEX.mount_path` - volumes.INDEX.mount_path
       * @enum {string}
       */
      attr: "volumes.INDEX.mount_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceVolumesINDEXNameErrorComponent: {
      /**
       * @description * `volumes.INDEX.name` - volumes.INDEX.name
       * @enum {string}
       */
      attr: "volumes.INDEX.name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceVolumesINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `volumes.INDEX.non_field_errors` - volumes.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "volumes.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceVolumesNonFieldErrorsErrorComponent: {
      /**
       * @description * `volumes.non_field_errors` - volumes.non_field_errors
       * @enum {string}
       */
      attr: "volumes.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    CreateProjectError: components["schemas"]["CreateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["CreateProjectSlugErrorComponent"];
    CreateProjectErrorResponse400: components["schemas"]["CreateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateProjectError"][];
    };
    CredentialError: {
      username?: string[];
      password?: string[];
      registry_url?: string[];
    };
    CsrfRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    DockerCredentialsRequest: {
      username: string;
      password: string;
      /**
       * Format: uri
       * @default registry-1.docker.io/v2
       */
      registry_url?: string;
    };
    DockerEnvVariable: {
      key: string;
      value: string;
    };
    DockerImage: {
      full_image: string;
      description: string;
    };
    DockerImageSearchError: {
      root?: string[];
      q?: string[];
    };
    DockerImageSearchErrorResponse: {
      errors: components["schemas"]["DockerImageSearchError"];
    };
    DockerLoginError: components["schemas"]["DockerLoginNonFieldErrorsErrorComponent"] | components["schemas"]["DockerLoginUsernameErrorComponent"] | components["schemas"]["DockerLoginPasswordErrorComponent"] | components["schemas"]["DockerLoginRegistryUrlErrorComponent"];
    DockerLoginErrorResponse400: components["schemas"]["DockerLoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    DockerLoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    DockerLoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DockerLoginRegistryUrlErrorComponent: {
      /**
       * @description * `registry_url` - registry_url
       * @enum {string}
       */
      attr: "registry_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DockerLoginRequest: {
      username: string;
      password: string;
      /** Format: uri */
      registry_url?: string;
    };
    DockerLoginSuccessResponse: {
      success: boolean;
    };
    DockerLoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DockerLoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["DockerLoginError"][];
    };
    DockerPortCheckError: {
      root?: string[];
      port?: string[];
    };
    DockerPortCheckErrorResponse: {
      errors: components["schemas"]["DockerPortCheckError"];
    };
    DockerPortCheckRequest: {
      port: number;
    };
    DockerPortCheckSuccessResponse: {
      available: boolean;
    };
    DockerService: {
      image: string;
      slug: string;
      urls: readonly components["schemas"]["URLModel"][];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      volumes: readonly components["schemas"]["Volume"][];
      command?: string | null;
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: components["schemas"]["DockerEnvVariable"][];
    };
    DockerServiceCreateError: {
      root?: string[];
      slug?: string[];
      image?: string[];
      command?: string[];
      credentials?: components["schemas"]["CredentialError"];
      urls?: components["schemas"]["URLsError"][];
      ports?: string[];
      env?: string[];
      volumes?: string[];
    };
    DockerServiceCreateErrorResponse: {
      errors: components["schemas"]["DockerServiceCreateError"];
    };
    DockerServiceCreateRequest: {
      slug?: string;
      image: string;
      command?: string;
      credentials?: components["schemas"]["DockerCredentialsRequest"];
      /** @default [] */
      urls?: components["schemas"]["URLRequest"][];
      /** @default [] */
      ports?: components["schemas"]["ServicePortsRequest"][];
      env?: {
        [key: string]: string;
      };
      /** @default [] */
      volumes?: components["schemas"]["VolumeRequest"][];
    };
    DockerServiceCreateSuccessResponse: {
      service: components["schemas"]["DockerService"];
    };
    DockerSuccessResponse: {
      images: components["schemas"]["DockerImage"][];
    };
    Error401: {
      code: components["schemas"]["ErrorCode401Enum"];
      detail: string;
      attr: string | null;
    };
    Error429: {
      code: components["schemas"]["ErrorCode429Enum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `authentication_failed` - Authentication Failed
     * * `not_authenticated` - Not Authenticated
     * @enum {string}
     */
    ErrorCode401Enum: "authentication_failed" | "not_authenticated";
    /**
     * @description * `throttled` - Throttled
     * @enum {string}
     */
    ErrorCode429Enum: "throttled";
    ErrorResponse401: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error401"][];
    };
    ErrorResponse429: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error429"][];
    };
    ForbiddenResponse: {
      errors: components["schemas"]["BaseError"];
    };
    GetAuthedUserErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetProjectListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetRootDomain: {
      domain: string;
    };
    GetRootDomainErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetVolumeSizeErrorResponse400: components["schemas"]["ParseErrorResponse"];
    LoginError: components["schemas"]["LoginNonFieldErrorsErrorComponent"] | components["schemas"]["LoginUsernameErrorComponent"] | components["schemas"]["LoginPasswordErrorComponent"];
    LoginErrorResponse400: components["schemas"]["LoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    LoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    LoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
    };
    LoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["LoginError"][];
    };
    LogoutErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ParseError: {
      code: components["schemas"]["ParseErrorCodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `parse_error` - Parse Error
     * @enum {string}
     */
    ParseErrorCodeEnum: "parse_error";
    ParseErrorResponse: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["ParseError"][];
    };
    PatchedProjectUpdateRequest: {
      slug?: string;
    };
    PortConfiguration: {
      host?: number | null;
      forwarded: number;
    };
    Project: {
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ProjectCreateRequest: {
      slug?: string;
    };
    ProjectSuccessResponse: {
      active: components["schemas"]["ActiveProjectPaginated"];
      archived: components["schemas"]["ArchivedProjectPaginated"];
    };
    ProjectUpdateErrorResponse: {
      errors: components["schemas"]["ProjetUpdateError"];
    };
    ProjetCreateError: {
      root?: string[];
      slug?: string[];
    };
    ProjetCreateErrorResponse: {
      errors: components["schemas"]["ProjetCreateError"];
    };
    ProjetUpdateError: {
      root?: string[];
      slug?: string[];
    };
    SearchDockerRegistryErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ServicePortsRequest: {
      /** @default 80 */
      public?: number;
      forwarded: number;
    };
    SingleProjectSuccessResponse: {
      project: components["schemas"]["Project"];
    };
    URLModel: {
      domain: string | null;
      /** @default / */
      base_path?: string;
      strip_prefix?: boolean;
    };
    URLRequest: {
      domain: string;
      /** @default / */
      base_path?: string;
      /** @default true */
      strip_prefix?: boolean;
    };
    URLsError: {
      domain?: string[];
      base_path?: string[];
    };
    UpdateProjectNameError: components["schemas"]["UpdateProjectNameNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateProjectNameSlugErrorComponent"];
    UpdateProjectNameErrorResponse400: components["schemas"]["UpdateProjectNameValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateProjectNameNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateProjectNameSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectNameValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateProjectNameError"][];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name?: string;
      last_name?: string;
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      is_staff?: boolean;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: "validation_error";
    Volume: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id?: string;
      name: string;
      containerPath: string;
    };
    VolumeGetSizeSuccessResponse: {
      size: number;
    };
    VolumeRequest: {
      name: string;
      mount_path: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
        "multipart/form-data": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LogoutErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAuthedUserErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** @description CSRF cookie view for retrieving CSRF before doing requests */
  csrf_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CSRF"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CsrfRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  checkIfPortIsAvailable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerPortCheckRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerPortCheckRequest"];
        "multipart/form-data": components["schemas"]["DockerPortCheckRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckSuccessResponse"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  searchDockerRegistry: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchDockerRegistryErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["DockerImageSearchErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  dockerLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerLoginRequest"];
        "multipart/form-data": components["schemas"]["DockerLoginRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerLoginSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DockerLoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getRootDomain: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRootDomain"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetRootDomainErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getProjectList: {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        query?: string;
        /**
         * @description * `slug_asc` - slug ascending
         * * `updated_at_desc` - updated_at in descending order
         */
        sort?: "slug_asc" | "updated_at_desc";
        /**
         * @description * `archived` - archived
         * * `active` - active
         */
        status?: "archived" | "active";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetProjectListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectCreateRequest"];
        "multipart/form-data": components["schemas"]["ProjectCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SingleProjectSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
    };
  };
  archiveDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  createDockerService: {
    parameters: {
      path: {
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateErrorResponse"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SingleProjectSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  archiveSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  updateProjectName: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SingleProjectSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateProjectNameErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getVolumeSize: {
    parameters: {
      path: {
        volume_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VolumeGetSizeSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetVolumeSizeErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
}
