/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/login/": {
    post: operations["login"];
  };
  "/api/auth/logout/": {
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    get: operations["getAuthedUser"];
  };
  "/api/csrf/": {
    /** @description CSRF cookie view for retrieving CSRF before doing requests */
    get: operations["csrf_retrieve"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthedForbiddenResponse: {
      detail: string;
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    CSRF: {
      details: string;
    };
    LoginErrorResponse: {
      errors: {
        [key: string]: unknown;
      };
    };
    LoginRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name?: string;
      last_name?: string;
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      is_staff?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
        "multipart/form-data": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      403: {
        content: {
          "application/json": components["schemas"]["AuthedForbiddenResponse"];
        };
      };
    };
  };
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["AuthedForbiddenResponse"];
        };
      };
    };
  };
  /** @description CSRF cookie view for retrieving CSRF before doing requests */
  csrf_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CSRF"];
        };
      };
    };
  };
}
