/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/archived-projects/": {
    get: operations["archived_projects_list"];
  };
  "/api/auth/login/": {
    post: operations["login"];
  };
  "/api/auth/logout/": {
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    get: operations["getAuthedUser"];
  };
  "/api/auth/me/with-token/": {
    get: operations["getAuthedUserWithToken"];
  };
  "/api/csrf/": {
    /** @description CSRF cookie view for retrieving CSRF before doing requests */
    get: operations["getCSRF"];
  };
  "/api/docker/check-port/": {
    post: operations["checkIfPortIsAvailable"];
  };
  "/api/docker/image-search/": {
    get: operations["searchDockerRegistry"];
  };
  "/api/docker/login/": {
    post: operations["dockerLogin"];
  };
  "/api/domain/root/": {
    get: operations["getRootDomain"];
  };
  "/api/projects/": {
    get: operations["projects_list"];
    post: operations["createProject"];
  };
  "/api/projects/{project_slug}/archive-service/docker/{service_slug}/": {
    delete: operations["archiveDockerService"];
  };
  "/api/projects/{project_slug}/create-service/docker/": {
    put: operations["updateDockerService"];
    post: operations["createDockerService"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/": {
    get: operations["getDockerService"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/deployments/": {
    get: operations["projects_service_details_docker_deployments_list"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/": {
    get: operations["projects_service_details_docker_deployments_retrieve"];
  };
  "/api/projects/{slug}/": {
    get: operations["getSingleProject"];
    delete: operations["archiveSingleProject"];
    patch: operations["updateProjectName"];
  };
  "/api/volumes/{volume_id}/size/": {
    get: operations["getVolumeSize"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ArchiveDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchivedProject: {
      slug?: string;
      /** Format: date-time */
      archived_at: string;
    };
    ArchivedProjectsListError: components["schemas"]["ArchivedProjectsListSlugErrorComponent"] | components["schemas"]["ArchivedProjectsListSortByErrorComponent"];
    ArchivedProjectsListErrorResponse400: components["schemas"]["ArchivedProjectsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ArchivedProjectsListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ArchivedProjectsListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ArchivedProjectsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ArchivedProjectsListError"][];
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    CheckIfPortIsAvailableError: components["schemas"]["CheckIfPortIsAvailableNonFieldErrorsErrorComponent"] | components["schemas"]["CheckIfPortIsAvailablePortErrorComponent"];
    CheckIfPortIsAvailableErrorResponse400: components["schemas"]["CheckIfPortIsAvailableValidationError"] | components["schemas"]["ParseErrorResponse"];
    CheckIfPortIsAvailableNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CheckIfPortIsAvailablePortErrorComponent: {
      /**
       * @description * `port` - port
       * @enum {string}
       */
      attr: "port";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    CheckIfPortIsAvailableValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CheckIfPortIsAvailableError"][];
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: "client_error";
    CreateDockerServiceCommandErrorComponent: {
      /**
       * @description * `command` - command
       * @enum {string}
       */
      attr: "command";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsRegistryUrlErrorComponent: {
      /**
       * @description * `credentials.registry_url` - credentials.registry_url
       * @enum {string}
       */
      attr: "credentials.registry_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceEnvErrorComponent: {
      /**
       * @description * `env` - env
       * @enum {string}
       */
      attr: "env";
      /**
       * @description * `not_a_dict` - not_a_dict
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_dict" | "null";
      detail: string;
    };
    CreateDockerServiceEnvKEYErrorComponent: {
      /**
       * @description * `env.KEY` - env.KEY
       * @enum {string}
       */
      attr: "env.KEY";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceError: components["schemas"]["CreateDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceSlugErrorComponent"] | components["schemas"]["CreateDockerServiceImageErrorComponent"] | components["schemas"]["CreateDockerServiceCommandErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsUsernameErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsPasswordErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsRegistryUrlErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXDomainErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXBasePathErrorComponent"] | components["schemas"]["CreateDockerServiceUrlsINDEXStripPrefixErrorComponent"] | components["schemas"]["CreateDockerServicePortsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServicePortsINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServicePortsINDEXPublicErrorComponent"] | components["schemas"]["CreateDockerServicePortsINDEXForwardedErrorComponent"] | components["schemas"]["CreateDockerServiceEnvErrorComponent"] | components["schemas"]["CreateDockerServiceEnvKEYErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXNameErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXMountPathErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXHostPathErrorComponent"] | components["schemas"]["CreateDockerServiceVolumesINDEXModeErrorComponent"] | components["schemas"]["CreateDockerServiceHealthcheckNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceHealthcheckTypeErrorComponent"] | components["schemas"]["CreateDockerServiceHealthcheckValueErrorComponent"] | components["schemas"]["CreateDockerServiceHealthcheckTimeoutSecondsErrorComponent"] | components["schemas"]["CreateDockerServiceHealthcheckIntervalSecondsErrorComponent"];
    CreateDockerServiceErrorResponse400: components["schemas"]["CreateDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateDockerServiceHealthcheckIntervalSecondsErrorComponent: {
      /**
       * @description * `healthcheck.interval_seconds` - healthcheck.interval_seconds
       * @enum {string}
       */
      attr: "healthcheck.interval_seconds";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceHealthcheckNonFieldErrorsErrorComponent: {
      /**
       * @description * `healthcheck.non_field_errors` - healthcheck.non_field_errors
       * @enum {string}
       */
      attr: "healthcheck.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceHealthcheckTimeoutSecondsErrorComponent: {
      /**
       * @description * `healthcheck.timeout_seconds` - healthcheck.timeout_seconds
       * @enum {string}
       */
      attr: "healthcheck.timeout_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    CreateDockerServiceHealthcheckTypeErrorComponent: {
      /**
       * @description * `healthcheck.type` - healthcheck.type
       * @enum {string}
       */
      attr: "healthcheck.type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    CreateDockerServiceHealthcheckValueErrorComponent: {
      /**
       * @description * `healthcheck.value` - healthcheck.value
       * @enum {string}
       */
      attr: "healthcheck.value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateDockerServicePortsINDEXForwardedErrorComponent: {
      /**
       * @description * `ports.INDEX.forwarded` - ports.INDEX.forwarded
       * @enum {string}
       */
      attr: "ports.INDEX.forwarded";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null" | "required";
      detail: string;
    };
    CreateDockerServicePortsINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `ports.INDEX.non_field_errors` - ports.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "ports.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServicePortsINDEXPublicErrorComponent: {
      /**
       * @description * `ports.INDEX.public` - ports.INDEX.public
       * @enum {string}
       */
      attr: "ports.INDEX.public";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null";
      detail: string;
    };
    CreateDockerServicePortsNonFieldErrorsErrorComponent: {
      /**
       * @description * `ports.non_field_errors` - ports.non_field_errors
       * @enum {string}
       */
      attr: "ports.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    CreateDockerServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXBasePathErrorComponent: {
      /**
       * @description * `urls.INDEX.base_path` - urls.INDEX.base_path
       * @enum {string}
       */
      attr: "urls.INDEX.base_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXDomainErrorComponent: {
      /**
       * @description * `urls.INDEX.domain` - urls.INDEX.domain
       * @enum {string}
       */
      attr: "urls.INDEX.domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `urls.INDEX.non_field_errors` - urls.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "urls.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceUrlsINDEXStripPrefixErrorComponent: {
      /**
       * @description * `urls.INDEX.strip_prefix` - urls.INDEX.strip_prefix
       * @enum {string}
       */
      attr: "urls.INDEX.strip_prefix";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceUrlsNonFieldErrorsErrorComponent: {
      /**
       * @description * `urls.non_field_errors` - urls.non_field_errors
       * @enum {string}
       */
      attr: "urls.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    CreateDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateDockerServiceError"][];
    };
    CreateDockerServiceVolumesINDEXHostPathErrorComponent: {
      /**
       * @description * `volumes.INDEX.host_path` - volumes.INDEX.host_path
       * @enum {string}
       */
      attr: "volumes.INDEX.host_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceVolumesINDEXModeErrorComponent: {
      /**
       * @description * `volumes.INDEX.mode` - volumes.INDEX.mode
       * @enum {string}
       */
      attr: "volumes.INDEX.mode";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    CreateDockerServiceVolumesINDEXMountPathErrorComponent: {
      /**
       * @description * `volumes.INDEX.mount_path` - volumes.INDEX.mount_path
       * @enum {string}
       */
      attr: "volumes.INDEX.mount_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceVolumesINDEXNameErrorComponent: {
      /**
       * @description * `volumes.INDEX.name` - volumes.INDEX.name
       * @enum {string}
       */
      attr: "volumes.INDEX.name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceVolumesINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `volumes.INDEX.non_field_errors` - volumes.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "volumes.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceVolumesNonFieldErrorsErrorComponent: {
      /**
       * @description * `volumes.non_field_errors` - volumes.non_field_errors
       * @enum {string}
       */
      attr: "volumes.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    CreateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectError: components["schemas"]["CreateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["CreateProjectSlugErrorComponent"] | components["schemas"]["CreateProjectDescriptionErrorComponent"];
    CreateProjectErrorResponse400: components["schemas"]["CreateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateProjectError"][];
    };
    DockerCredentialsRequest: {
      username: string;
      password: string;
      /**
       * Format: uri
       * @default registry-1.docker.io/v2
       */
      registry_url?: string;
    };
    DockerEnvVariable: {
      key: string;
    };
    DockerImage: {
      full_image: string;
      description: string;
    };
    DockerImageSearchResponse: {
      images: components["schemas"]["DockerImage"][];
    };
    DockerLoginError: components["schemas"]["DockerLoginNonFieldErrorsErrorComponent"] | components["schemas"]["DockerLoginUsernameErrorComponent"] | components["schemas"]["DockerLoginPasswordErrorComponent"] | components["schemas"]["DockerLoginRegistryUrlErrorComponent"];
    DockerLoginErrorResponse400: components["schemas"]["DockerLoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    DockerLoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    DockerLoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DockerLoginRegistryUrlErrorComponent: {
      /**
       * @description * `registry_url` - registry_url
       * @enum {string}
       */
      attr: "registry_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DockerLoginRequest: {
      username: string;
      password: string;
      /** Format: uri */
      registry_url?: string;
    };
    DockerLoginSuccessResponse: {
      success: boolean;
    };
    DockerLoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DockerLoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["DockerLoginError"][];
    };
    DockerPortCheckRequest: {
      port: number;
    };
    DockerPortCheckResponse: {
      available: boolean;
    };
    DockerService: {
      image_repository: string;
      slug: string;
      urls: readonly components["schemas"]["URLModel"][];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      volumes: readonly components["schemas"]["Volume"][];
      command?: string | null;
      /** @default [] */
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: readonly components["schemas"]["DockerEnvVariable"][];
      healthcheck: components["schemas"]["HealthCheck"];
      network_aliases: readonly string[];
    };
    DockerServiceCreateRequest: {
      slug?: string;
      image: string;
      command?: string;
      credentials?: components["schemas"]["DockerCredentialsRequest"];
      /** @default [] */
      urls?: components["schemas"]["URLRequest"][];
      /** @default [] */
      ports?: components["schemas"]["ServicePortsRequest"][];
      env?: {
        [key: string]: string;
      };
      /** @default [] */
      volumes?: components["schemas"]["VolumeRequest"][];
      healthcheck?: components["schemas"]["HealthCheckRequest"];
    };
    DockerServiceDeployment: {
      is_current_production?: boolean;
      /** Format: date-time */
      created_at: string;
      is_redeploy_of?: number | null;
      hash?: string;
      image_tag?: string;
      status?: components["schemas"]["StatusEnum"];
      status_reason?: string | null;
      /** Format: uri */
      url?: string | null;
      network_aliases: readonly string[];
    };
    Error401: {
      code: components["schemas"]["ErrorCode401Enum"];
      detail: string;
      attr: string | null;
    };
    Error404: {
      code: components["schemas"]["ErrorCode404Enum"];
      detail: string;
      attr: string | null;
    };
    Error429: {
      code: components["schemas"]["ErrorCode429Enum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `authentication_failed` - Authentication Failed
     * * `not_authenticated` - Not Authenticated
     * @enum {string}
     */
    ErrorCode401Enum: "authentication_failed" | "not_authenticated";
    /**
     * @description * `not_found` - Not Found
     * @enum {string}
     */
    ErrorCode404Enum: "not_found";
    /**
     * @description * `throttled` - Throttled
     * @enum {string}
     */
    ErrorCode429Enum: "throttled";
    ErrorResponse401: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error401"][];
    };
    ErrorResponse404: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error404"][];
    };
    ErrorResponse429: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error429"][];
    };
    GetAuthedUserErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetAuthedUserWithTokenErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetCSRFErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetRootDomain: {
      domain: string;
    };
    GetRootDomainErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetVolumeSizeErrorResponse400: components["schemas"]["ParseErrorResponse"];
    HealthCheck: {
      type?: components["schemas"]["HealthCheckTypeEnum"];
      value?: string;
      timeout_seconds?: number;
      interval_seconds?: number;
    };
    HealthCheckRequest: {
      type: components["schemas"]["HealthCheckRequestTypeEnum"];
      value: string;
      /** @default 60 */
      timeout_seconds?: number;
      /** @default 30 */
      interval_seconds?: string;
    };
    /**
     * @description * `path` - path
     * * `command` - command
     * @enum {string}
     */
    HealthCheckRequestTypeEnum: "path" | "command";
    /**
     * @description * `COMMAND` - Command
     * * `PATH` - Path
     * @enum {string}
     */
    HealthCheckTypeEnum: "COMMAND" | "PATH";
    LoginError: components["schemas"]["LoginNonFieldErrorsErrorComponent"] | components["schemas"]["LoginUsernameErrorComponent"] | components["schemas"]["LoginPasswordErrorComponent"];
    LoginErrorResponse400: components["schemas"]["LoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    LoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    LoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
      token?: string;
    };
    LoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["LoginError"][];
    };
    LogoutErrorResponse400: components["schemas"]["ParseErrorResponse"];
    PaginatedArchivedProjectList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results?: components["schemas"]["ArchivedProject"][];
    };
    PaginatedDockerServiceDeploymentList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results?: components["schemas"]["DockerServiceDeployment"][];
    };
    PaginatedProjectList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results?: components["schemas"]["Project"][];
    };
    ParseError: {
      code: components["schemas"]["ParseErrorCodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `parse_error` - Parse Error
     * @enum {string}
     */
    ParseErrorCodeEnum: "parse_error";
    ParseErrorResponse: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["ParseError"][];
    };
    PatchedProjectUpdateRequest: {
      slug?: string;
      description?: string;
    };
    PortConfiguration: {
      host?: number | null;
      forwarded: number;
    };
    Project: {
      description?: string | null;
      id?: string;
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      healthy_services: number;
      total_services: number;
    };
    ProjectCreateRequest: {
      slug?: string;
      description?: string;
    };
    ProjectsListError: components["schemas"]["ProjectsListSlugErrorComponent"] | components["schemas"]["ProjectsListSortByErrorComponent"];
    ProjectsListErrorResponse400: components["schemas"]["ProjectsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ProjectsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsListCreatedAtErrorComponent: {
      /**
       * @description * `created_at` - created_at
       * @enum {string}
       */
      attr: "created_at";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListError: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListStatusErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListCreatedAtErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListHashErrorComponent"];
    ProjectsServiceDetailsDockerDeploymentsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsListHashErrorComponent: {
      /**
       * @description * `hash` - hash
       * @enum {string}
       */
      attr: "hash";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListStatusErrorComponent: {
      /**
       * @description * `status` - status
       * @enum {string}
       */
      attr: "status";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SearchDockerRegistryErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ServicePortsRequest: {
      /** @default 80 */
      public?: number;
      forwarded: number;
    };
    /**
     * @description * `QUEUED` - Queued
     * * `CANCELLED` - Cancelled
     * * `FAILED` - Failed
     * * `PREPARING` - Preparing
     * * `STARTING` - Starting
     * * `RESTARTING` - Restarting
     * * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `OFFLINE` - Offline
     * @enum {string}
     */
    StatusEnum: "QUEUED" | "CANCELLED" | "FAILED" | "PREPARING" | "STARTING" | "RESTARTING" | "HEALTHY" | "UNHEALTHY" | "OFFLINE";
    URLModel: {
      domain: string | null;
      /** @default / */
      base_path?: string;
      strip_prefix?: boolean;
    };
    URLRequest: {
      domain: string;
      /** @default / */
      base_path?: string;
      /** @default true */
      strip_prefix?: boolean;
    };
    UpdateDockerServiceCommandErrorComponent: {
      /**
       * @description * `command` - command
       * @enum {string}
       */
      attr: "command";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateDockerServiceCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceCredentialsRegistryUrlErrorComponent: {
      /**
       * @description * `credentials.registry_url` - credentials.registry_url
       * @enum {string}
       */
      attr: "credentials.registry_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceEnvErrorComponent: {
      /**
       * @description * `env` - env
       * @enum {string}
       */
      attr: "env";
      /**
       * @description * `not_a_dict` - not_a_dict
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_dict" | "null";
      detail: string;
    };
    UpdateDockerServiceEnvKEYErrorComponent: {
      /**
       * @description * `env.KEY` - env.KEY
       * @enum {string}
       */
      attr: "env.KEY";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceError: components["schemas"]["UpdateDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceSlugErrorComponent"] | components["schemas"]["UpdateDockerServiceImageErrorComponent"] | components["schemas"]["UpdateDockerServiceCommandErrorComponent"] | components["schemas"]["UpdateDockerServiceCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceCredentialsUsernameErrorComponent"] | components["schemas"]["UpdateDockerServiceCredentialsPasswordErrorComponent"] | components["schemas"]["UpdateDockerServiceCredentialsRegistryUrlErrorComponent"] | components["schemas"]["UpdateDockerServiceUrlsNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceUrlsINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceUrlsINDEXDomainErrorComponent"] | components["schemas"]["UpdateDockerServiceUrlsINDEXBasePathErrorComponent"] | components["schemas"]["UpdateDockerServiceUrlsINDEXStripPrefixErrorComponent"] | components["schemas"]["UpdateDockerServicePortsNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServicePortsINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServicePortsINDEXPublicErrorComponent"] | components["schemas"]["UpdateDockerServicePortsINDEXForwardedErrorComponent"] | components["schemas"]["UpdateDockerServiceEnvErrorComponent"] | components["schemas"]["UpdateDockerServiceEnvKEYErrorComponent"] | components["schemas"]["UpdateDockerServiceVolumesNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceVolumesINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceVolumesINDEXNameErrorComponent"] | components["schemas"]["UpdateDockerServiceVolumesINDEXMountPathErrorComponent"] | components["schemas"]["UpdateDockerServiceVolumesINDEXHostPathErrorComponent"] | components["schemas"]["UpdateDockerServiceVolumesINDEXModeErrorComponent"] | components["schemas"]["UpdateDockerServiceHealthcheckNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateDockerServiceHealthcheckTypeErrorComponent"] | components["schemas"]["UpdateDockerServiceHealthcheckValueErrorComponent"] | components["schemas"]["UpdateDockerServiceHealthcheckTimeoutSecondsErrorComponent"] | components["schemas"]["UpdateDockerServiceHealthcheckIntervalSecondsErrorComponent"];
    UpdateDockerServiceErrorResponse400: components["schemas"]["UpdateDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateDockerServiceHealthcheckIntervalSecondsErrorComponent: {
      /**
       * @description * `healthcheck.interval_seconds` - healthcheck.interval_seconds
       * @enum {string}
       */
      attr: "healthcheck.interval_seconds";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceHealthcheckNonFieldErrorsErrorComponent: {
      /**
       * @description * `healthcheck.non_field_errors` - healthcheck.non_field_errors
       * @enum {string}
       */
      attr: "healthcheck.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateDockerServiceHealthcheckTimeoutSecondsErrorComponent: {
      /**
       * @description * `healthcheck.timeout_seconds` - healthcheck.timeout_seconds
       * @enum {string}
       */
      attr: "healthcheck.timeout_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    UpdateDockerServiceHealthcheckTypeErrorComponent: {
      /**
       * @description * `healthcheck.type` - healthcheck.type
       * @enum {string}
       */
      attr: "healthcheck.type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    UpdateDockerServiceHealthcheckValueErrorComponent: {
      /**
       * @description * `healthcheck.value` - healthcheck.value
       * @enum {string}
       */
      attr: "healthcheck.value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateDockerServicePortsINDEXForwardedErrorComponent: {
      /**
       * @description * `ports.INDEX.forwarded` - ports.INDEX.forwarded
       * @enum {string}
       */
      attr: "ports.INDEX.forwarded";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null" | "required";
      detail: string;
    };
    UpdateDockerServicePortsINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `ports.INDEX.non_field_errors` - ports.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "ports.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateDockerServicePortsINDEXPublicErrorComponent: {
      /**
       * @description * `ports.INDEX.public` - ports.INDEX.public
       * @enum {string}
       */
      attr: "ports.INDEX.public";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null";
      detail: string;
    };
    UpdateDockerServicePortsNonFieldErrorsErrorComponent: {
      /**
       * @description * `ports.non_field_errors` - ports.non_field_errors
       * @enum {string}
       */
      attr: "ports.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    UpdateDockerServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceUrlsINDEXBasePathErrorComponent: {
      /**
       * @description * `urls.INDEX.base_path` - urls.INDEX.base_path
       * @enum {string}
       */
      attr: "urls.INDEX.base_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceUrlsINDEXDomainErrorComponent: {
      /**
       * @description * `urls.INDEX.domain` - urls.INDEX.domain
       * @enum {string}
       */
      attr: "urls.INDEX.domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceUrlsINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `urls.INDEX.non_field_errors` - urls.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "urls.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateDockerServiceUrlsINDEXStripPrefixErrorComponent: {
      /**
       * @description * `urls.INDEX.strip_prefix` - urls.INDEX.strip_prefix
       * @enum {string}
       */
      attr: "urls.INDEX.strip_prefix";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateDockerServiceUrlsNonFieldErrorsErrorComponent: {
      /**
       * @description * `urls.non_field_errors` - urls.non_field_errors
       * @enum {string}
       */
      attr: "urls.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    UpdateDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateDockerServiceError"][];
    };
    UpdateDockerServiceVolumesINDEXHostPathErrorComponent: {
      /**
       * @description * `volumes.INDEX.host_path` - volumes.INDEX.host_path
       * @enum {string}
       */
      attr: "volumes.INDEX.host_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceVolumesINDEXModeErrorComponent: {
      /**
       * @description * `volumes.INDEX.mode` - volumes.INDEX.mode
       * @enum {string}
       */
      attr: "volumes.INDEX.mode";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    UpdateDockerServiceVolumesINDEXMountPathErrorComponent: {
      /**
       * @description * `volumes.INDEX.mount_path` - volumes.INDEX.mount_path
       * @enum {string}
       */
      attr: "volumes.INDEX.mount_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceVolumesINDEXNameErrorComponent: {
      /**
       * @description * `volumes.INDEX.name` - volumes.INDEX.name
       * @enum {string}
       */
      attr: "volumes.INDEX.name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateDockerServiceVolumesINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `volumes.INDEX.non_field_errors` - volumes.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "volumes.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateDockerServiceVolumesNonFieldErrorsErrorComponent: {
      /**
       * @description * `volumes.non_field_errors` - volumes.non_field_errors
       * @enum {string}
       */
      attr: "volumes.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    UpdateProjectNameDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectNameError: components["schemas"]["UpdateProjectNameNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateProjectNameSlugErrorComponent"] | components["schemas"]["UpdateProjectNameDescriptionErrorComponent"];
    UpdateProjectNameErrorResponse400: components["schemas"]["UpdateProjectNameValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateProjectNameNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateProjectNameSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectNameValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateProjectNameError"][];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name?: string;
      last_name?: string;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: "validation_error";
    Volume: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id?: string;
      name: string;
      container_path: string;
      host_path?: string | null;
      mode?: components["schemas"]["VolumeModeEnum"];
    };
    VolumeGetSizeResponse: {
      size: number;
    };
    /**
     * @description * `READ_ONLY` - Read-Only
     * * `READ_WRITE` - Read-Write
     * @enum {string}
     */
    VolumeModeEnum: "READ_ONLY" | "READ_WRITE";
    VolumeRequest: {
      name?: string;
      mount_path: string;
      host_path?: string;
      /** @default rw */
      mode?: components["schemas"]["VolumeRequestModeEnum"];
    };
    /**
     * @description * `ro` - READ_ONLY
     * * `rw` - READ_WRITE
     * @enum {string}
     */
    VolumeRequestModeEnum: "ro" | "rw";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  archived_projects_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `archived_at` - Archived at
         * * `-archived_at` - Archived at (descending)
         */
        sort_by?: ("-archived_at" | "-slug" | "archived_at" | "slug")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedArchivedProjectList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchivedProjectsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
        "multipart/form-data": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      /** @description No response body */
      302: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LogoutErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAuthedUserErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getAuthedUserWithToken: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAuthedUserWithTokenErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** @description CSRF cookie view for retrieving CSRF before doing requests */
  getCSRF: {
    responses: {
      400: {
        content: {
          "application/json": components["schemas"]["GetCSRFErrorResponse400"];
        };
      };
      /** @description No response body */
      401: {
        content: never;
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  checkIfPortIsAvailable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerPortCheckRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerPortCheckRequest"];
        "multipart/form-data": components["schemas"]["DockerPortCheckRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CheckIfPortIsAvailableErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  searchDockerRegistry: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerImageSearchResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchDockerRegistryErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  dockerLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerLoginRequest"];
        "multipart/form-data": components["schemas"]["DockerLoginRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerLoginSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DockerLoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getRootDomain: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRootDomain"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetRootDomainErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `updated_at` - Updated at
         * * `-updated_at` - Updated at (descending)
         */
        sort_by?: ("-slug" | "-updated_at" | "slug" | "updated_at")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProjectList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectCreateRequest"];
        "multipart/form-data": components["schemas"]["ProjectCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  archiveDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  updateDockerService: {
    parameters: {
      path: {
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  createDockerService: {
    parameters: {
      path: {
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_service_details_docker_deployments_list: {
    parameters: {
      query?: {
        created_at?: string;
        hash?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /**
         * @description * `QUEUED` - Queued
         * * `CANCELLED` - Cancelled
         * * `FAILED` - Failed
         * * `PREPARING` - Preparing
         * * `STARTING` - Starting
         * * `RESTARTING` - Restarting
         * * `HEALTHY` - Healthy
         * * `UNHEALTHY` - Unhealthy
         * * `OFFLINE` - Offline
         */
        status?: ("CANCELLED" | "FAILED" | "HEALTHY" | "OFFLINE" | "PREPARING" | "QUEUED" | "RESTARTING" | "STARTING" | "UNHEALTHY")[];
      };
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDockerServiceDeploymentList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_service_details_docker_deployments_retrieve: {
    parameters: {
      path: {
        deployment_hash: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  archiveSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  updateProjectName: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateProjectNameErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  getVolumeSize: {
    parameters: {
      path: {
        volume_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VolumeGetSizeResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetVolumeSizeErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
}
