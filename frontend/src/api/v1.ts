/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/login/": {
    post: operations["login"];
  };
  "/api/auth/logout/": {
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    get: operations["getAuthedUser"];
  };
  "/api/csrf/": {
    /** @description CSRF cookie view for retrieving CSRF before doing requests */
    get: operations["csrf_retrieve"];
  };
  "/api/docker/check-port/": {
    post: operations["checkIfPortIsAvailable"];
  };
  "/api/docker/image-search/": {
    get: operations["searchDockerRegistry"];
  };
  "/api/docker/login/": {
    post: operations["dockerLogin"];
  };
  "/api/domain/root/": {
    get: operations["getRootDomain"];
  };
  "/api/projects/": {
    get: operations["getProjectList"];
    post: operations["createProject"];
  };
  "/api/projects/{project_slug}/create-service/docker/": {
    post: operations["createDockerService"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/": {
    get: operations["getDockerService"];
  };
  "/api/projects/{slug}/": {
    get: operations["getSingleProject"];
    delete: operations["archiveSingleProject"];
    patch: operations["updateProjectName"];
  };
  "/api/volumes/{slug}/size/": {
    get: operations["getVolumeSize"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActiveProjectPaginated: {
      projects: components["schemas"]["Project"][];
      total_count: number;
    };
    ArchivedProject: {
      slug?: string;
      /** Format: date-time */
      archived_at: string;
    };
    ArchivedProjectPaginated: {
      projects: components["schemas"]["ArchivedProject"][];
      total_count: number;
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    BaseError: {
      root?: string[];
    };
    BaseErrorResponse: {
      errors: components["schemas"]["BaseError"];
    };
    CSRF: {
      details: string;
    };
    CredentialError: {
      username?: string[];
      password?: string[];
      registry_url?: string[];
    };
    DockerCredentialsRequest: {
      username: string;
      password: string;
      /**
       * Format: uri
       * @default registry-1.docker.io/v2
       */
      registry_url?: string;
    };
    DockerImage: {
      full_image: string;
      description: string;
    };
    DockerImageSearchError: {
      root?: string[];
      q?: string[];
    };
    DockerImageSearchErrorResponse: {
      errors: components["schemas"]["DockerImageSearchError"];
    };
    DockerLoginError: {
      root?: string[];
      username?: string[];
      password?: string[];
      registry_url?: string[];
    };
    DockerLoginErrorResponse: {
      errors: components["schemas"]["DockerLoginError"];
    };
    DockerLoginRequest: {
      username: string;
      password: string;
      /** Format: uri */
      registry_url?: string;
    };
    DockerLoginSuccessResponse: {
      success: boolean;
    };
    DockerPortCheckError: {
      root?: string[];
      port?: string[];
    };
    DockerPortCheckErrorResponse: {
      errors: components["schemas"]["DockerPortCheckError"];
    };
    DockerPortCheckRequest: {
      port: number;
    };
    DockerPortCheckSuccessResponse: {
      available: boolean;
    };
    DockerService: {
      image: string;
      slug: string;
      urls: readonly components["schemas"]["URLModel"][];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      volumes: readonly components["schemas"]["Volume"][];
      name: string;
      archived?: boolean;
      command?: string | null;
      ports: readonly components["schemas"]["PortConfiguration"][];
    };
    DockerServiceCreateError: {
      root?: string[];
      name?: string[];
      image?: string[];
      command?: string[];
      credentials?: components["schemas"]["CredentialError"];
      urls?: components["schemas"]["URLsError"][];
      ports?: string[];
      env?: string[];
      volumes?: string[];
    };
    DockerServiceCreateErrorResponse: {
      errors: components["schemas"]["DockerServiceCreateError"];
    };
    DockerServiceCreateRequest: {
      name: string;
      image: string;
      command?: string;
      credentials?: components["schemas"]["DockerCredentialsRequest"];
      /** @default [] */
      urls?: components["schemas"]["URLRequest"][];
      /** @default [] */
      ports?: components["schemas"]["ServicePortsRequest"][];
      env?: {
        [key: string]: string;
      };
      /** @default [] */
      volumes?: components["schemas"]["VolumeRequest"][];
    };
    DockerServiceCreateSuccessResponse: {
      service: components["schemas"]["DockerService"];
    };
    DockerSuccessResponse: {
      images: components["schemas"]["DockerImage"][];
    };
    ForbiddenResponse: {
      errors: components["schemas"]["BaseError"];
    };
    GetRootDomain: {
      domain: string;
    };
    LoginError: {
      root?: string[];
      username?: string[];
      password?: string[];
    };
    LoginErrorResponse: {
      errors: components["schemas"]["LoginError"];
    };
    LoginRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
    };
    PatchedProjectUpdateRequest: {
      slug?: string;
    };
    PortConfiguration: {
      host?: number | null;
      forwarded: number;
    };
    Project: {
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ProjectCreateRequest: {
      slug?: string;
    };
    ProjectSuccessResponse: {
      active: components["schemas"]["ActiveProjectPaginated"];
      archived: components["schemas"]["ArchivedProjectPaginated"];
    };
    ProjectUpdateErrorResponse: {
      errors: components["schemas"]["ProjetUpdateError"];
    };
    ProjetCreateError: {
      root?: string[];
      slug?: string[];
    };
    ProjetCreateErrorResponse: {
      errors: components["schemas"]["ProjetCreateError"];
    };
    ProjetUpdateError: {
      root?: string[];
      slug?: string[];
    };
    ServicePortsRequest: {
      /** @default 80 */
      public?: number;
      forwarded: number;
    };
    SingleProjectSuccessResponse: {
      project: components["schemas"]["Project"];
    };
    URLModel: {
      domain: string | null;
      /** @default / */
      base_path?: string;
      strip_prefix?: boolean;
    };
    URLRequest: {
      domain: string;
      /** @default / */
      base_path?: string;
      /** @default true */
      strip_prefix?: boolean;
    };
    URLsError: {
      domain?: string[];
      base_path?: string[];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name?: string;
      last_name?: string;
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      is_staff?: boolean;
    };
    Volume: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      slug: string;
      name: string;
      containerPath: string;
    };
    VolumeGetSizeSuccessResponse: {
      size: number;
    };
    VolumeRequest: {
      name: string;
      mount_path: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
        "multipart/form-data": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
    };
  };
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
    };
  };
  /** @description CSRF cookie view for retrieving CSRF before doing requests */
  csrf_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CSRF"];
        };
      };
    };
  };
  checkIfPortIsAvailable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerPortCheckRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerPortCheckRequest"];
        "multipart/form-data": components["schemas"]["DockerPortCheckRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckErrorResponse"];
        };
      };
    };
  };
  searchDockerRegistry: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["DockerImageSearchErrorResponse"];
        };
      };
    };
  };
  dockerLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerLoginRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerLoginRequest"];
        "multipart/form-data": components["schemas"]["DockerLoginRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerLoginSuccessResponse"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["DockerLoginErrorResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["DockerLoginErrorResponse"];
        };
      };
    };
  };
  getRootDomain: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRootDomain"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
    };
  };
  getProjectList: {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        query?: string;
        /**
         * @description * `slug_asc` - slug ascending
         * * `updated_at_desc` - updated_at in descending order
         */
        sort?: "slug_asc" | "updated_at_desc";
        /**
         * @description * `archived` - archived
         * * `active` - active
         */
        status?: "archived" | "active";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
    };
  };
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectCreateRequest"];
        "multipart/form-data": components["schemas"]["ProjectCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SingleProjectSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProjetCreateErrorResponse"];
        };
      };
    };
  };
  createDockerService: {
    parameters: {
      path: {
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateErrorResponse"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateErrorResponse"];
        };
      };
    };
  };
  getDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceCreateSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  getSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SingleProjectSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
        };
      };
    };
  };
  archiveSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
  updateProjectName: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SingleProjectSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateErrorResponse"];
        };
      };
    };
  };
  getVolumeSize: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VolumeGetSizeSuccessResponse"];
        };
      };
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["BaseErrorResponse"];
        };
      };
    };
  };
}
