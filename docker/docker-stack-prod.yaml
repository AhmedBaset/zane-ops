services:
  proxy:
    image: ghcr.io/zane-ops/proxy:${IMAGE_VERSION}
    command: caddy run --resume
    logging:
      driver: "fluentd"
      options:
        mode: "non-blocking"
        fluentd-address: "unix://${ZANE_APP_DIRECTORY:-/var/www/zaneops}/.fluentd/fluentd.sock"
        fluentd-async: "true"
        fluentd-max-retries: 10
        fluentd-sub-second-precision: "true"
        tag: "{\"service_id\":\"zane.proxy\"}"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role==manager
      labels:
        zane.stack: "true"
        zane.role: "proxy"
    ports:
      - "443:443"
    volumes:
      - caddy-data:/data
      - caddy-config:/config
    networks:
      zane:
        aliases:
          - zane.proxy
  #  registry:
  #    image: registry:2
  #    container_name: zane-registry
  #    restart: always
  #    environment:
  #      REGISTRY_AUTH: htpasswd
  #      REGISTRY_AUTH_HTPASSWD_REALM: Registry
  #      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
  #      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
  #    volumes:
  #      - ./registry/auth:/auth
  #      - ./registry/data:/data
  #      - registry-lib-data:/var/lib/registry
  #    ports:
  #      - "9989:5000"
  #    networks:
  #      zane:
  #        aliases:
  #          - zane.registry
  valkey:
    image: valkey/valkey:7.2.5-alpine
    volumes:
      - redis-data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role==manager
      labels:
        zane.stack: "true"
    networks:
      zane:
        aliases:
          - zane.valkey
  db:
    image: postgres:16-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${ZANE_DB_USER:-zane}
      POSTGRES_PASSWORD: ${ZANE_DB_PASSWORD}
      POSTGRES_DB: zane
    networks:
      zane:
        aliases:
          - zane.db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role==manager
      labels:
        zane.stack: "true"
  fluentd:
    image: ghcr.io/zane-ops/fluentd:${IMAGE_VERSION}
    volumes:
      - "${ZANE_APP_DIRECTORY:-/var/www/zaneops}/.fluentd/:/var/fluentd/:rw"
    networks:
      zane:
        aliases:
          - zane.fluentd
    environment:
      - API_HOST=zane.api
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 1
        window: 120s
      placement:
        constraints:
          - node.role==manager
      labels:
        zane.stack: "true"
volumes:
  db-data:
  redis-data:
  registry-lib-data:
  caddy-data:
  caddy-config:
networks:
  zane:
    external: true